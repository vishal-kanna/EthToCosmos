// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: arka/nft/v1beta1/tx.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Class, NFT } from "../../../cosmos/nft/v1beta1/nft";
import { ClassMetadata, NFTMetadata } from "./nft";

export const protobufPackage = "arka.nft.v1beta1";

/** MsgMintNFT Defines the Msg/Mint request type. */
export interface MsgMintNFT {
  /** nft defines the details of NFT to be minted */
  nft:
    | NFT
    | undefined;
  /** sender defines the account address of the minter */
  sender: string;
  /** metadata is the AI agent specific metadata */
  metadata: NFTMetadata | undefined;
}

/** MsgMintNFTResponse Defines the Msg/Mint response type. */
export interface MsgMintNFTResponse {
}

/** MsgBurnNft Defines the Msg/Burn request type. */
export interface MsgBurnNFT {
  /** class_id is the id of NFT class */
  classId: string;
  /** nft_id is the id of NFT */
  nftId: string;
  /** sender defines the address of the NFT owner */
  sender: string;
}

/** MsgBurnNftResponse Defines the Msg/Burn response type. */
export interface MsgBurnNFTResponse {
}

/** MsgSaveClass Defines the Msg/SaveClass request type. */
export interface MsgSaveClass {
  /** class defines the details of NFT class */
  class:
    | Class
    | undefined;
  /** sender defines the address class admin */
  sender: string;
  /** metadata is the class specific metadata */
  metadata: ClassMetadata | undefined;
}

/** MsgSaveClassResponse Defnes the Msg/SaveClass response type. */
export interface MsgSaveClassResponse {
}

/** MsgUpdateClass Defines the Msg/UpdateClass request type. */
export interface MsgUpdateClass {
  /** class defines the details of NFT class */
  class:
    | Class
    | undefined;
  /** sender defines the account address of the class admin */
  sender: string;
  /** metadata is the AI class specific metadata of the NFT class */
  metadata: ClassMetadata | undefined;
}

/** MsgUpdateClassResponse Defines the Msg/UpdateClass response type. */
export interface MsgUpdateClassResponse {
}

/** MsgUpdateNFT Defines the Msg/UpdateNFT request type. */
export interface MsgUpdateNFT {
  /** nft defines the details of NFT to be updated */
  nft:
    | NFT
    | undefined;
  /** sender defines the account address of NFT owner */
  sender: string;
  /** metadata is the AI-agent checkpoint specific metadata of the NFT */
  metadata: NFTMetadata | undefined;
}

/** MsgUpdateNFTResponse Defines the Msg/MsgUpdateNFTResponse response type. */
export interface MsgUpdateNFTResponse {
}

function createBaseMsgMintNFT(): MsgMintNFT {
  return { nft: undefined, sender: "", metadata: undefined };
}

export const MsgMintNFT = {
  encode(message: MsgMintNFT, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.nft !== undefined) {
      NFT.encode(message.nft, writer.uint32(10).fork()).ldelim();
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    if (message.metadata !== undefined) {
      NFTMetadata.encode(message.metadata, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgMintNFT {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgMintNFT();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nft = NFT.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadata = NFTMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgMintNFT {
    return {
      nft: isSet(object.nft) ? NFT.fromJSON(object.nft) : undefined,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      metadata: isSet(object.metadata) ? NFTMetadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: MsgMintNFT): unknown {
    const obj: any = {};
    if (message.nft !== undefined) {
      obj.nft = NFT.toJSON(message.nft);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.metadata !== undefined) {
      obj.metadata = NFTMetadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgMintNFT>, I>>(base?: I): MsgMintNFT {
    return MsgMintNFT.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgMintNFT>, I>>(object: I): MsgMintNFT {
    const message = createBaseMsgMintNFT();
    message.nft = (object.nft !== undefined && object.nft !== null) ? NFT.fromPartial(object.nft) : undefined;
    message.sender = object.sender ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? NFTMetadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseMsgMintNFTResponse(): MsgMintNFTResponse {
  return {};
}

export const MsgMintNFTResponse = {
  encode(_: MsgMintNFTResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgMintNFTResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgMintNFTResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgMintNFTResponse {
    return {};
  },

  toJSON(_: MsgMintNFTResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgMintNFTResponse>, I>>(base?: I): MsgMintNFTResponse {
    return MsgMintNFTResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgMintNFTResponse>, I>>(_: I): MsgMintNFTResponse {
    const message = createBaseMsgMintNFTResponse();
    return message;
  },
};

function createBaseMsgBurnNFT(): MsgBurnNFT {
  return { classId: "", nftId: "", sender: "" };
}

export const MsgBurnNFT = {
  encode(message: MsgBurnNFT, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.classId !== "") {
      writer.uint32(10).string(message.classId);
    }
    if (message.nftId !== "") {
      writer.uint32(18).string(message.nftId);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgBurnNFT {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBurnNFT();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.classId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nftId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgBurnNFT {
    return {
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      nftId: isSet(object.nftId) ? globalThis.String(object.nftId) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgBurnNFT): unknown {
    const obj: any = {};
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.nftId !== "") {
      obj.nftId = message.nftId;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgBurnNFT>, I>>(base?: I): MsgBurnNFT {
    return MsgBurnNFT.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgBurnNFT>, I>>(object: I): MsgBurnNFT {
    const message = createBaseMsgBurnNFT();
    message.classId = object.classId ?? "";
    message.nftId = object.nftId ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgBurnNFTResponse(): MsgBurnNFTResponse {
  return {};
}

export const MsgBurnNFTResponse = {
  encode(_: MsgBurnNFTResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgBurnNFTResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBurnNFTResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgBurnNFTResponse {
    return {};
  },

  toJSON(_: MsgBurnNFTResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgBurnNFTResponse>, I>>(base?: I): MsgBurnNFTResponse {
    return MsgBurnNFTResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgBurnNFTResponse>, I>>(_: I): MsgBurnNFTResponse {
    const message = createBaseMsgBurnNFTResponse();
    return message;
  },
};

function createBaseMsgSaveClass(): MsgSaveClass {
  return { class: undefined, sender: "", metadata: undefined };
}

export const MsgSaveClass = {
  encode(message: MsgSaveClass, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.class !== undefined) {
      Class.encode(message.class, writer.uint32(10).fork()).ldelim();
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    if (message.metadata !== undefined) {
      ClassMetadata.encode(message.metadata, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSaveClass {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSaveClass();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.class = Class.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadata = ClassMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSaveClass {
    return {
      class: isSet(object.class) ? Class.fromJSON(object.class) : undefined,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      metadata: isSet(object.metadata) ? ClassMetadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: MsgSaveClass): unknown {
    const obj: any = {};
    if (message.class !== undefined) {
      obj.class = Class.toJSON(message.class);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.metadata !== undefined) {
      obj.metadata = ClassMetadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSaveClass>, I>>(base?: I): MsgSaveClass {
    return MsgSaveClass.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSaveClass>, I>>(object: I): MsgSaveClass {
    const message = createBaseMsgSaveClass();
    message.class = (object.class !== undefined && object.class !== null) ? Class.fromPartial(object.class) : undefined;
    message.sender = object.sender ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? ClassMetadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseMsgSaveClassResponse(): MsgSaveClassResponse {
  return {};
}

export const MsgSaveClassResponse = {
  encode(_: MsgSaveClassResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSaveClassResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSaveClassResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSaveClassResponse {
    return {};
  },

  toJSON(_: MsgSaveClassResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSaveClassResponse>, I>>(base?: I): MsgSaveClassResponse {
    return MsgSaveClassResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSaveClassResponse>, I>>(_: I): MsgSaveClassResponse {
    const message = createBaseMsgSaveClassResponse();
    return message;
  },
};

function createBaseMsgUpdateClass(): MsgUpdateClass {
  return { class: undefined, sender: "", metadata: undefined };
}

export const MsgUpdateClass = {
  encode(message: MsgUpdateClass, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.class !== undefined) {
      Class.encode(message.class, writer.uint32(10).fork()).ldelim();
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    if (message.metadata !== undefined) {
      ClassMetadata.encode(message.metadata, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateClass {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateClass();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.class = Class.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadata = ClassMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateClass {
    return {
      class: isSet(object.class) ? Class.fromJSON(object.class) : undefined,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      metadata: isSet(object.metadata) ? ClassMetadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: MsgUpdateClass): unknown {
    const obj: any = {};
    if (message.class !== undefined) {
      obj.class = Class.toJSON(message.class);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.metadata !== undefined) {
      obj.metadata = ClassMetadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateClass>, I>>(base?: I): MsgUpdateClass {
    return MsgUpdateClass.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateClass>, I>>(object: I): MsgUpdateClass {
    const message = createBaseMsgUpdateClass();
    message.class = (object.class !== undefined && object.class !== null) ? Class.fromPartial(object.class) : undefined;
    message.sender = object.sender ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? ClassMetadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateClassResponse(): MsgUpdateClassResponse {
  return {};
}

export const MsgUpdateClassResponse = {
  encode(_: MsgUpdateClassResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateClassResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateClassResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateClassResponse {
    return {};
  },

  toJSON(_: MsgUpdateClassResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateClassResponse>, I>>(base?: I): MsgUpdateClassResponse {
    return MsgUpdateClassResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateClassResponse>, I>>(_: I): MsgUpdateClassResponse {
    const message = createBaseMsgUpdateClassResponse();
    return message;
  },
};

function createBaseMsgUpdateNFT(): MsgUpdateNFT {
  return { nft: undefined, sender: "", metadata: undefined };
}

export const MsgUpdateNFT = {
  encode(message: MsgUpdateNFT, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.nft !== undefined) {
      NFT.encode(message.nft, writer.uint32(10).fork()).ldelim();
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    if (message.metadata !== undefined) {
      NFTMetadata.encode(message.metadata, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateNFT {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateNFT();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nft = NFT.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadata = NFTMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateNFT {
    return {
      nft: isSet(object.nft) ? NFT.fromJSON(object.nft) : undefined,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      metadata: isSet(object.metadata) ? NFTMetadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: MsgUpdateNFT): unknown {
    const obj: any = {};
    if (message.nft !== undefined) {
      obj.nft = NFT.toJSON(message.nft);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.metadata !== undefined) {
      obj.metadata = NFTMetadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateNFT>, I>>(base?: I): MsgUpdateNFT {
    return MsgUpdateNFT.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateNFT>, I>>(object: I): MsgUpdateNFT {
    const message = createBaseMsgUpdateNFT();
    message.nft = (object.nft !== undefined && object.nft !== null) ? NFT.fromPartial(object.nft) : undefined;
    message.sender = object.sender ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? NFTMetadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateNFTResponse(): MsgUpdateNFTResponse {
  return {};
}

export const MsgUpdateNFTResponse = {
  encode(_: MsgUpdateNFTResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateNFTResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateNFTResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateNFTResponse {
    return {};
  },

  toJSON(_: MsgUpdateNFTResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateNFTResponse>, I>>(base?: I): MsgUpdateNFTResponse {
    return MsgUpdateNFTResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateNFTResponse>, I>>(_: I): MsgUpdateNFTResponse {
    const message = createBaseMsgUpdateNFTResponse();
    return message;
  },
};

/** Msg defines the NFT Msg service. */
export interface Msg {
  /** MintNFT defines a method to mint nft */
  MintNFT(request: MsgMintNFT): Promise<MsgMintNFTResponse>;
  /** BurnNFT defines a method for burning a nft from a specific account. */
  BurnNFT(request: MsgBurnNFT): Promise<MsgBurnNFTResponse>;
  /** SaveClass defines a method to save given NFT class */
  SaveClass(request: MsgSaveClass): Promise<MsgSaveClassResponse>;
  /** UpdteClass defines a method to update the given NFT class */
  UpdateClass(request: MsgUpdateClass): Promise<MsgUpdateClassResponse>;
  /** UpdateNFT defines a method for updating an existing NFT. */
  UpdateNFT(request: MsgUpdateNFT): Promise<MsgUpdateNFTResponse>;
}

export const MsgServiceName = "arka.nft.v1beta1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.MintNFT = this.MintNFT.bind(this);
    this.BurnNFT = this.BurnNFT.bind(this);
    this.SaveClass = this.SaveClass.bind(this);
    this.UpdateClass = this.UpdateClass.bind(this);
    this.UpdateNFT = this.UpdateNFT.bind(this);
  }
  MintNFT(request: MsgMintNFT): Promise<MsgMintNFTResponse> {
    const data = MsgMintNFT.encode(request).finish();
    const promise = this.rpc.request(this.service, "MintNFT", data);
    return promise.then((data) => MsgMintNFTResponse.decode(_m0.Reader.create(data)));
  }

  BurnNFT(request: MsgBurnNFT): Promise<MsgBurnNFTResponse> {
    const data = MsgBurnNFT.encode(request).finish();
    const promise = this.rpc.request(this.service, "BurnNFT", data);
    return promise.then((data) => MsgBurnNFTResponse.decode(_m0.Reader.create(data)));
  }

  SaveClass(request: MsgSaveClass): Promise<MsgSaveClassResponse> {
    const data = MsgSaveClass.encode(request).finish();
    const promise = this.rpc.request(this.service, "SaveClass", data);
    return promise.then((data) => MsgSaveClassResponse.decode(_m0.Reader.create(data)));
  }

  UpdateClass(request: MsgUpdateClass): Promise<MsgUpdateClassResponse> {
    const data = MsgUpdateClass.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateClass", data);
    return promise.then((data) => MsgUpdateClassResponse.decode(_m0.Reader.create(data)));
  }

  UpdateNFT(request: MsgUpdateNFT): Promise<MsgUpdateNFTResponse> {
    const data = MsgUpdateNFT.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateNFT", data);
    return promise.then((data) => MsgUpdateNFTResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
