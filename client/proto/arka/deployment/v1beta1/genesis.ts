// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: arka/deployment/v1beta1/genesis.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Bid, Deployment, Inference } from "./deployment";

export const protobufPackage = "arka.deployment.v1beta1";

/** GenesisState defines the deployment module's genesis state. */
export interface GenesisState {
  deploymentSeq: number;
  bidSeq: number;
  inferenceSeq: number;
  deployments: Deployment[];
  bids: Bid[];
  inference: Inference[];
}

function createBaseGenesisState(): GenesisState {
  return { deploymentSeq: 0, bidSeq: 0, inferenceSeq: 0, deployments: [], bids: [], inference: [] };
}

export const GenesisState = {
  encode(message: GenesisState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deploymentSeq !== 0) {
      writer.uint32(8).uint64(message.deploymentSeq);
    }
    if (message.bidSeq !== 0) {
      writer.uint32(16).uint64(message.bidSeq);
    }
    if (message.inferenceSeq !== 0) {
      writer.uint32(24).uint64(message.inferenceSeq);
    }
    for (const v of message.deployments) {
      Deployment.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.bids) {
      Bid.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    for (const v of message.inference) {
      Inference.encode(v!, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deploymentSeq = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.bidSeq = longToNumber(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.inferenceSeq = longToNumber(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.deployments.push(Deployment.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.bids.push(Bid.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.inference.push(Inference.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      deploymentSeq: isSet(object.deploymentSeq) ? globalThis.Number(object.deploymentSeq) : 0,
      bidSeq: isSet(object.bidSeq) ? globalThis.Number(object.bidSeq) : 0,
      inferenceSeq: isSet(object.inferenceSeq) ? globalThis.Number(object.inferenceSeq) : 0,
      deployments: globalThis.Array.isArray(object?.deployments)
        ? object.deployments.map((e: any) => Deployment.fromJSON(e))
        : [],
      bids: globalThis.Array.isArray(object?.bids) ? object.bids.map((e: any) => Bid.fromJSON(e)) : [],
      inference: globalThis.Array.isArray(object?.inference)
        ? object.inference.map((e: any) => Inference.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.deploymentSeq !== 0) {
      obj.deploymentSeq = Math.round(message.deploymentSeq);
    }
    if (message.bidSeq !== 0) {
      obj.bidSeq = Math.round(message.bidSeq);
    }
    if (message.inferenceSeq !== 0) {
      obj.inferenceSeq = Math.round(message.inferenceSeq);
    }
    if (message.deployments?.length) {
      obj.deployments = message.deployments.map((e) => Deployment.toJSON(e));
    }
    if (message.bids?.length) {
      obj.bids = message.bids.map((e) => Bid.toJSON(e));
    }
    if (message.inference?.length) {
      obj.inference = message.inference.map((e) => Inference.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.deploymentSeq = object.deploymentSeq ?? 0;
    message.bidSeq = object.bidSeq ?? 0;
    message.inferenceSeq = object.inferenceSeq ?? 0;
    message.deployments = object.deployments?.map((e) => Deployment.fromPartial(e)) || [];
    message.bids = object.bids?.map((e) => Bid.fromPartial(e)) || [];
    message.inference = object.inference?.map((e) => Inference.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
