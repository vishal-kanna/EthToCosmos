// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: arka/deployment/v1beta1/event.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { DeploymentStatus, deploymentStatusFromJSON, deploymentStatusToJSON } from "./deployment";

export const protobufPackage = "arka.deployment.v1beta1";

/** EventCreateDeployment is emitted on Msg/CreateDeployment */
export interface EventCreateDeployment {
  /** id is the unique id of the deployment */
  deploymentId: number;
  /** sender is the host of the deployment */
  sender: string;
}

/** EventUpdateDeployment is emitted on Msg/UpdateDeployment */
export interface EventUpdateDeployment {
  /** id is the unique id of the deployment */
  id: number;
  /** sender is the host of the deployment */
  sender: string;
  /** deployment_status is the status of the deployment */
  deploymentStatus: DeploymentStatus;
}

/** EventBid is emitted on Msg/Bid */
export interface EventBid {
  /** deployment_id is the unique id of the deployment */
  deploymentId: number;
  /** bid_id is the unique id of the bid */
  bidId: number;
  /** bidder is the unique address of bidder */
  bidder: string;
}

/** EventAcceptBid is emitted on Msg/AcceptBid */
export interface EventAcceptBid {
  /** bid_id is the unique id of the bid */
  bidId: number;
  sender: string;
}

/** EventSubmitInference is emitted on Msg/SubmitInference */
export interface EventSubmitInference {
  /** deployment_id is the unique id of the deployment */
  deploymentId: number;
  /** inference_id is the unique id of the inference */
  inferenceId: number;
  sender: string;
}

/** EventSubmitInferenceResult is emitted on Msg/SubmitInference */
export interface EventSubmitInferenceResult {
  /** deployment_id is the unique id of the deployment */
  deploymentId: number;
  sender: string;
  creator: string;
  /** inference_id is the unique id of the inference */
  inferenceId: number;
}

/** EventConvertToNFT is emitted on Msg/ConvertToNFT */
export interface EventConvertToNFT {
  /** deployment_id is the unique id of the deployment */
  deploymentId: number;
  /** agent_id is the unique id of the agent */
  agentId: number;
  /** class_id is the unique id of the class */
  classId: string;
  /** inference_id is the unique id of the inference */
  inferenceId: number;
  sender: string;
}

function createBaseEventCreateDeployment(): EventCreateDeployment {
  return { deploymentId: 0, sender: "" };
}

export const EventCreateDeployment = {
  encode(message: EventCreateDeployment, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deploymentId !== 0) {
      writer.uint32(8).uint64(message.deploymentId);
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventCreateDeployment {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCreateDeployment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deploymentId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventCreateDeployment {
    return {
      deploymentId: isSet(object.deploymentId) ? globalThis.Number(object.deploymentId) : 0,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: EventCreateDeployment): unknown {
    const obj: any = {};
    if (message.deploymentId !== 0) {
      obj.deploymentId = Math.round(message.deploymentId);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventCreateDeployment>, I>>(base?: I): EventCreateDeployment {
    return EventCreateDeployment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventCreateDeployment>, I>>(object: I): EventCreateDeployment {
    const message = createBaseEventCreateDeployment();
    message.deploymentId = object.deploymentId ?? 0;
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseEventUpdateDeployment(): EventUpdateDeployment {
  return { id: 0, sender: "", deploymentStatus: 0 };
}

export const EventUpdateDeployment = {
  encode(message: EventUpdateDeployment, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    if (message.deploymentStatus !== 0) {
      writer.uint32(24).int32(message.deploymentStatus);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventUpdateDeployment {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventUpdateDeployment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.deploymentStatus = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventUpdateDeployment {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      deploymentStatus: isSet(object.deploymentStatus) ? deploymentStatusFromJSON(object.deploymentStatus) : 0,
    };
  },

  toJSON(message: EventUpdateDeployment): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.deploymentStatus !== 0) {
      obj.deploymentStatus = deploymentStatusToJSON(message.deploymentStatus);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventUpdateDeployment>, I>>(base?: I): EventUpdateDeployment {
    return EventUpdateDeployment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventUpdateDeployment>, I>>(object: I): EventUpdateDeployment {
    const message = createBaseEventUpdateDeployment();
    message.id = object.id ?? 0;
    message.sender = object.sender ?? "";
    message.deploymentStatus = object.deploymentStatus ?? 0;
    return message;
  },
};

function createBaseEventBid(): EventBid {
  return { deploymentId: 0, bidId: 0, bidder: "" };
}

export const EventBid = {
  encode(message: EventBid, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deploymentId !== 0) {
      writer.uint32(8).uint64(message.deploymentId);
    }
    if (message.bidId !== 0) {
      writer.uint32(16).uint64(message.bidId);
    }
    if (message.bidder !== "") {
      writer.uint32(26).string(message.bidder);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventBid {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventBid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deploymentId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.bidId = longToNumber(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.bidder = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventBid {
    return {
      deploymentId: isSet(object.deploymentId) ? globalThis.Number(object.deploymentId) : 0,
      bidId: isSet(object.bidId) ? globalThis.Number(object.bidId) : 0,
      bidder: isSet(object.bidder) ? globalThis.String(object.bidder) : "",
    };
  },

  toJSON(message: EventBid): unknown {
    const obj: any = {};
    if (message.deploymentId !== 0) {
      obj.deploymentId = Math.round(message.deploymentId);
    }
    if (message.bidId !== 0) {
      obj.bidId = Math.round(message.bidId);
    }
    if (message.bidder !== "") {
      obj.bidder = message.bidder;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventBid>, I>>(base?: I): EventBid {
    return EventBid.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventBid>, I>>(object: I): EventBid {
    const message = createBaseEventBid();
    message.deploymentId = object.deploymentId ?? 0;
    message.bidId = object.bidId ?? 0;
    message.bidder = object.bidder ?? "";
    return message;
  },
};

function createBaseEventAcceptBid(): EventAcceptBid {
  return { bidId: 0, sender: "" };
}

export const EventAcceptBid = {
  encode(message: EventAcceptBid, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.bidId !== 0) {
      writer.uint32(8).uint64(message.bidId);
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventAcceptBid {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAcceptBid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.bidId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAcceptBid {
    return {
      bidId: isSet(object.bidId) ? globalThis.Number(object.bidId) : 0,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: EventAcceptBid): unknown {
    const obj: any = {};
    if (message.bidId !== 0) {
      obj.bidId = Math.round(message.bidId);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAcceptBid>, I>>(base?: I): EventAcceptBid {
    return EventAcceptBid.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAcceptBid>, I>>(object: I): EventAcceptBid {
    const message = createBaseEventAcceptBid();
    message.bidId = object.bidId ?? 0;
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseEventSubmitInference(): EventSubmitInference {
  return { deploymentId: 0, inferenceId: 0, sender: "" };
}

export const EventSubmitInference = {
  encode(message: EventSubmitInference, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deploymentId !== 0) {
      writer.uint32(8).uint64(message.deploymentId);
    }
    if (message.inferenceId !== 0) {
      writer.uint32(16).uint64(message.inferenceId);
    }
    if (message.sender !== "") {
      writer.uint32(34).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventSubmitInference {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSubmitInference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deploymentId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.inferenceId = longToNumber(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSubmitInference {
    return {
      deploymentId: isSet(object.deploymentId) ? globalThis.Number(object.deploymentId) : 0,
      inferenceId: isSet(object.inferenceId) ? globalThis.Number(object.inferenceId) : 0,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: EventSubmitInference): unknown {
    const obj: any = {};
    if (message.deploymentId !== 0) {
      obj.deploymentId = Math.round(message.deploymentId);
    }
    if (message.inferenceId !== 0) {
      obj.inferenceId = Math.round(message.inferenceId);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSubmitInference>, I>>(base?: I): EventSubmitInference {
    return EventSubmitInference.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSubmitInference>, I>>(object: I): EventSubmitInference {
    const message = createBaseEventSubmitInference();
    message.deploymentId = object.deploymentId ?? 0;
    message.inferenceId = object.inferenceId ?? 0;
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseEventSubmitInferenceResult(): EventSubmitInferenceResult {
  return { deploymentId: 0, sender: "", creator: "", inferenceId: 0 };
}

export const EventSubmitInferenceResult = {
  encode(message: EventSubmitInferenceResult, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deploymentId !== 0) {
      writer.uint32(8).uint64(message.deploymentId);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    if (message.creator !== "") {
      writer.uint32(34).string(message.creator);
    }
    if (message.inferenceId !== 0) {
      writer.uint32(40).uint64(message.inferenceId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventSubmitInferenceResult {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSubmitInferenceResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deploymentId = longToNumber(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.inferenceId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSubmitInferenceResult {
    return {
      deploymentId: isSet(object.deploymentId) ? globalThis.Number(object.deploymentId) : 0,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      inferenceId: isSet(object.inferenceId) ? globalThis.Number(object.inferenceId) : 0,
    };
  },

  toJSON(message: EventSubmitInferenceResult): unknown {
    const obj: any = {};
    if (message.deploymentId !== 0) {
      obj.deploymentId = Math.round(message.deploymentId);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.inferenceId !== 0) {
      obj.inferenceId = Math.round(message.inferenceId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSubmitInferenceResult>, I>>(base?: I): EventSubmitInferenceResult {
    return EventSubmitInferenceResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSubmitInferenceResult>, I>>(object: I): EventSubmitInferenceResult {
    const message = createBaseEventSubmitInferenceResult();
    message.deploymentId = object.deploymentId ?? 0;
    message.sender = object.sender ?? "";
    message.creator = object.creator ?? "";
    message.inferenceId = object.inferenceId ?? 0;
    return message;
  },
};

function createBaseEventConvertToNFT(): EventConvertToNFT {
  return { deploymentId: 0, agentId: 0, classId: "", inferenceId: 0, sender: "" };
}

export const EventConvertToNFT = {
  encode(message: EventConvertToNFT, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deploymentId !== 0) {
      writer.uint32(8).uint64(message.deploymentId);
    }
    if (message.agentId !== 0) {
      writer.uint32(16).uint64(message.agentId);
    }
    if (message.classId !== "") {
      writer.uint32(26).string(message.classId);
    }
    if (message.inferenceId !== 0) {
      writer.uint32(32).uint64(message.inferenceId);
    }
    if (message.sender !== "") {
      writer.uint32(42).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventConvertToNFT {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventConvertToNFT();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deploymentId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.agentId = longToNumber(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.classId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.inferenceId = longToNumber(reader.uint64() as Long);
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventConvertToNFT {
    return {
      deploymentId: isSet(object.deploymentId) ? globalThis.Number(object.deploymentId) : 0,
      agentId: isSet(object.agentId) ? globalThis.Number(object.agentId) : 0,
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      inferenceId: isSet(object.inferenceId) ? globalThis.Number(object.inferenceId) : 0,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: EventConvertToNFT): unknown {
    const obj: any = {};
    if (message.deploymentId !== 0) {
      obj.deploymentId = Math.round(message.deploymentId);
    }
    if (message.agentId !== 0) {
      obj.agentId = Math.round(message.agentId);
    }
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.inferenceId !== 0) {
      obj.inferenceId = Math.round(message.inferenceId);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventConvertToNFT>, I>>(base?: I): EventConvertToNFT {
    return EventConvertToNFT.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventConvertToNFT>, I>>(object: I): EventConvertToNFT {
    const message = createBaseEventConvertToNFT();
    message.deploymentId = object.deploymentId ?? 0;
    message.agentId = object.agentId ?? 0;
    message.classId = object.classId ?? "";
    message.inferenceId = object.inferenceId ?? 0;
    message.sender = object.sender ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
