// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: arka/deployment/v1beta1/deployment.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "arka.deployment.v1beta1";

/** DeploymentStatus defines deployment status */
export enum DeploymentStatus {
  DEPLOYMENT_STATUS_UNSPECIFIED = 0,
  DEPLOYMENT_STATUS_ACTIVE = 1,
  DEPLOYMENT_STATUS_INACTIVE = 2,
  DEPLOYMENT_STATUS_PENDING = 3,
  UNRECOGNIZED = -1,
}

export function deploymentStatusFromJSON(object: any): DeploymentStatus {
  switch (object) {
    case 0:
    case "DEPLOYMENT_STATUS_UNSPECIFIED":
      return DeploymentStatus.DEPLOYMENT_STATUS_UNSPECIFIED;
    case 1:
    case "DEPLOYMENT_STATUS_ACTIVE":
      return DeploymentStatus.DEPLOYMENT_STATUS_ACTIVE;
    case 2:
    case "DEPLOYMENT_STATUS_INACTIVE":
      return DeploymentStatus.DEPLOYMENT_STATUS_INACTIVE;
    case 3:
    case "DEPLOYMENT_STATUS_PENDING":
      return DeploymentStatus.DEPLOYMENT_STATUS_PENDING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DeploymentStatus.UNRECOGNIZED;
  }
}

export function deploymentStatusToJSON(object: DeploymentStatus): string {
  switch (object) {
    case DeploymentStatus.DEPLOYMENT_STATUS_UNSPECIFIED:
      return "DEPLOYMENT_STATUS_UNSPECIFIED";
    case DeploymentStatus.DEPLOYMENT_STATUS_ACTIVE:
      return "DEPLOYMENT_STATUS_ACTIVE";
    case DeploymentStatus.DEPLOYMENT_STATUS_INACTIVE:
      return "DEPLOYMENT_STATUS_INACTIVE";
    case DeploymentStatus.DEPLOYMENT_STATUS_PENDING:
      return "DEPLOYMENT_STATUS_PENDING";
    case DeploymentStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** InferenceStatus defines agent inference status */
export enum InferenceStatus {
  INFERENCE_STATUS_UNSPECIFIED = 0,
  INFERENCE_STATUS_PENDING = 1,
  INFERENCE_STATUS_DONE = 2,
  UNRECOGNIZED = -1,
}

export function inferenceStatusFromJSON(object: any): InferenceStatus {
  switch (object) {
    case 0:
    case "INFERENCE_STATUS_UNSPECIFIED":
      return InferenceStatus.INFERENCE_STATUS_UNSPECIFIED;
    case 1:
    case "INFERENCE_STATUS_PENDING":
      return InferenceStatus.INFERENCE_STATUS_PENDING;
    case 2:
    case "INFERENCE_STATUS_DONE":
      return InferenceStatus.INFERENCE_STATUS_DONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InferenceStatus.UNRECOGNIZED;
  }
}

export function inferenceStatusToJSON(object: InferenceStatus): string {
  switch (object) {
    case InferenceStatus.INFERENCE_STATUS_UNSPECIFIED:
      return "INFERENCE_STATUS_UNSPECIFIED";
    case InferenceStatus.INFERENCE_STATUS_PENDING:
      return "INFERENCE_STATUS_PENDING";
    case InferenceStatus.INFERENCE_STATUS_DONE:
      return "INFERENCE_STATUS_DONE";
    case InferenceStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** BidStatus defines deployment bid status */
export enum BidStatus {
  BID_STATUS_UNSPECIFIED = 0,
  BID_STATUS_PENDING = 1,
  BID_STATUS_ACCEPTED = 2,
  BID_STATUS_REJECTED = 3,
  UNRECOGNIZED = -1,
}

export function bidStatusFromJSON(object: any): BidStatus {
  switch (object) {
    case 0:
    case "BID_STATUS_UNSPECIFIED":
      return BidStatus.BID_STATUS_UNSPECIFIED;
    case 1:
    case "BID_STATUS_PENDING":
      return BidStatus.BID_STATUS_PENDING;
    case 2:
    case "BID_STATUS_ACCEPTED":
      return BidStatus.BID_STATUS_ACCEPTED;
    case 3:
    case "BID_STATUS_REJECTED":
      return BidStatus.BID_STATUS_REJECTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BidStatus.UNRECOGNIZED;
  }
}

export function bidStatusToJSON(object: BidStatus): string {
  switch (object) {
    case BidStatus.BID_STATUS_UNSPECIFIED:
      return "BID_STATUS_UNSPECIFIED";
    case BidStatus.BID_STATUS_PENDING:
      return "BID_STATUS_PENDING";
    case BidStatus.BID_STATUS_ACCEPTED:
      return "BID_STATUS_ACCEPTED";
    case BidStatus.BID_STATUS_REJECTED:
      return "BID_STATUS_REJECTED";
    case BidStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Deployment holds information about each deployment */
export interface Deployment {
  id: number;
  agentId: number;
  inferencePrice: Coin | undefined;
  createdAt: Date | undefined;
  expiration: Date | undefined;
  status: DeploymentStatus;
  creator: string;
  host: string;
}

/** Inference defines holds agent inference status */
export interface Inference {
  id: number;
  request: Uint8Array;
  result: Uint8Array;
  createdAt: Date | undefined;
  status: InferenceStatus;
  creator: string;
  deploymentId: number;
  checksum: string;
}

/** Bid holds deployment bid details */
export interface Bid {
  id: number;
  deploymentId: number;
  price: Coin | undefined;
  status: BidStatus;
  bidder: string;
}

/** EscrowBalance holds information about deployed agent's escrow balance of the user */
export interface EscrowBalance {
  deploymentId: number;
  address: string;
  amount: Coin[];
}

/** ActiveBid holds information about accepted bid for the deployment */
export interface ActiveBid {
  deploymentId: number;
  amount: Coin[];
}

function createBaseDeployment(): Deployment {
  return {
    id: 0,
    agentId: 0,
    inferencePrice: undefined,
    createdAt: undefined,
    expiration: undefined,
    status: 0,
    creator: "",
    host: "",
  };
}

export const Deployment = {
  encode(message: Deployment, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.agentId !== 0) {
      writer.uint32(16).uint64(message.agentId);
    }
    if (message.inferencePrice !== undefined) {
      Coin.encode(message.inferencePrice, writer.uint32(26).fork()).ldelim();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(34).fork()).ldelim();
    }
    if (message.expiration !== undefined) {
      Timestamp.encode(toTimestamp(message.expiration), writer.uint32(42).fork()).ldelim();
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    if (message.creator !== "") {
      writer.uint32(58).string(message.creator);
    }
    if (message.host !== "") {
      writer.uint32(66).string(message.host);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Deployment {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.agentId = longToNumber(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.inferencePrice = Coin.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.expiration = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.host = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Deployment {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      agentId: isSet(object.agentId) ? globalThis.Number(object.agentId) : 0,
      inferencePrice: isSet(object.inferencePrice) ? Coin.fromJSON(object.inferencePrice) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      expiration: isSet(object.expiration) ? fromJsonTimestamp(object.expiration) : undefined,
      status: isSet(object.status) ? deploymentStatusFromJSON(object.status) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      host: isSet(object.host) ? globalThis.String(object.host) : "",
    };
  },

  toJSON(message: Deployment): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.agentId !== 0) {
      obj.agentId = Math.round(message.agentId);
    }
    if (message.inferencePrice !== undefined) {
      obj.inferencePrice = Coin.toJSON(message.inferencePrice);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.expiration !== undefined) {
      obj.expiration = message.expiration.toISOString();
    }
    if (message.status !== 0) {
      obj.status = deploymentStatusToJSON(message.status);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Deployment>, I>>(base?: I): Deployment {
    return Deployment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Deployment>, I>>(object: I): Deployment {
    const message = createBaseDeployment();
    message.id = object.id ?? 0;
    message.agentId = object.agentId ?? 0;
    message.inferencePrice = (object.inferencePrice !== undefined && object.inferencePrice !== null)
      ? Coin.fromPartial(object.inferencePrice)
      : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.expiration = object.expiration ?? undefined;
    message.status = object.status ?? 0;
    message.creator = object.creator ?? "";
    message.host = object.host ?? "";
    return message;
  },
};

function createBaseInference(): Inference {
  return {
    id: 0,
    request: new Uint8Array(0),
    result: new Uint8Array(0),
    createdAt: undefined,
    status: 0,
    creator: "",
    deploymentId: 0,
    checksum: "",
  };
}

export const Inference = {
  encode(message: Inference, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.request.length !== 0) {
      writer.uint32(18).bytes(message.request);
    }
    if (message.result.length !== 0) {
      writer.uint32(26).bytes(message.result);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(34).fork()).ldelim();
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.creator !== "") {
      writer.uint32(50).string(message.creator);
    }
    if (message.deploymentId !== 0) {
      writer.uint32(56).uint64(message.deploymentId);
    }
    if (message.checksum !== "") {
      writer.uint32(66).string(message.checksum);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Inference {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.request = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.result = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.deploymentId = longToNumber(reader.uint64() as Long);
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.checksum = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Inference {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      request: isSet(object.request) ? bytesFromBase64(object.request) : new Uint8Array(0),
      result: isSet(object.result) ? bytesFromBase64(object.result) : new Uint8Array(0),
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      status: isSet(object.status) ? inferenceStatusFromJSON(object.status) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      deploymentId: isSet(object.deploymentId) ? globalThis.Number(object.deploymentId) : 0,
      checksum: isSet(object.checksum) ? globalThis.String(object.checksum) : "",
    };
  },

  toJSON(message: Inference): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.request.length !== 0) {
      obj.request = base64FromBytes(message.request);
    }
    if (message.result.length !== 0) {
      obj.result = base64FromBytes(message.result);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.status !== 0) {
      obj.status = inferenceStatusToJSON(message.status);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.deploymentId !== 0) {
      obj.deploymentId = Math.round(message.deploymentId);
    }
    if (message.checksum !== "") {
      obj.checksum = message.checksum;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Inference>, I>>(base?: I): Inference {
    return Inference.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Inference>, I>>(object: I): Inference {
    const message = createBaseInference();
    message.id = object.id ?? 0;
    message.request = object.request ?? new Uint8Array(0);
    message.result = object.result ?? new Uint8Array(0);
    message.createdAt = object.createdAt ?? undefined;
    message.status = object.status ?? 0;
    message.creator = object.creator ?? "";
    message.deploymentId = object.deploymentId ?? 0;
    message.checksum = object.checksum ?? "";
    return message;
  },
};

function createBaseBid(): Bid {
  return { id: 0, deploymentId: 0, price: undefined, status: 0, bidder: "" };
}

export const Bid = {
  encode(message: Bid, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.deploymentId !== 0) {
      writer.uint32(16).uint64(message.deploymentId);
    }
    if (message.price !== undefined) {
      Coin.encode(message.price, writer.uint32(26).fork()).ldelim();
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.bidder !== "") {
      writer.uint32(42).string(message.bidder);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Bid {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.deploymentId = longToNumber(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.price = Coin.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.bidder = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Bid {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      deploymentId: isSet(object.deploymentId) ? globalThis.Number(object.deploymentId) : 0,
      price: isSet(object.price) ? Coin.fromJSON(object.price) : undefined,
      status: isSet(object.status) ? bidStatusFromJSON(object.status) : 0,
      bidder: isSet(object.bidder) ? globalThis.String(object.bidder) : "",
    };
  },

  toJSON(message: Bid): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.deploymentId !== 0) {
      obj.deploymentId = Math.round(message.deploymentId);
    }
    if (message.price !== undefined) {
      obj.price = Coin.toJSON(message.price);
    }
    if (message.status !== 0) {
      obj.status = bidStatusToJSON(message.status);
    }
    if (message.bidder !== "") {
      obj.bidder = message.bidder;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Bid>, I>>(base?: I): Bid {
    return Bid.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Bid>, I>>(object: I): Bid {
    const message = createBaseBid();
    message.id = object.id ?? 0;
    message.deploymentId = object.deploymentId ?? 0;
    message.price = (object.price !== undefined && object.price !== null) ? Coin.fromPartial(object.price) : undefined;
    message.status = object.status ?? 0;
    message.bidder = object.bidder ?? "";
    return message;
  },
};

function createBaseEscrowBalance(): EscrowBalance {
  return { deploymentId: 0, address: "", amount: [] };
}

export const EscrowBalance = {
  encode(message: EscrowBalance, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deploymentId !== 0) {
      writer.uint32(8).uint64(message.deploymentId);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EscrowBalance {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEscrowBalance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deploymentId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EscrowBalance {
    return {
      deploymentId: isSet(object.deploymentId) ? globalThis.Number(object.deploymentId) : 0,
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      amount: globalThis.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: EscrowBalance): unknown {
    const obj: any = {};
    if (message.deploymentId !== 0) {
      obj.deploymentId = Math.round(message.deploymentId);
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EscrowBalance>, I>>(base?: I): EscrowBalance {
    return EscrowBalance.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EscrowBalance>, I>>(object: I): EscrowBalance {
    const message = createBaseEscrowBalance();
    message.deploymentId = object.deploymentId ?? 0;
    message.address = object.address ?? "";
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseActiveBid(): ActiveBid {
  return { deploymentId: 0, amount: [] };
}

export const ActiveBid = {
  encode(message: ActiveBid, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deploymentId !== 0) {
      writer.uint32(8).uint64(message.deploymentId);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ActiveBid {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveBid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deploymentId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActiveBid {
    return {
      deploymentId: isSet(object.deploymentId) ? globalThis.Number(object.deploymentId) : 0,
      amount: globalThis.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: ActiveBid): unknown {
    const obj: any = {};
    if (message.deploymentId !== 0) {
      obj.deploymentId = Math.round(message.deploymentId);
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActiveBid>, I>>(base?: I): ActiveBid {
    return ActiveBid.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActiveBid>, I>>(object: I): ActiveBid {
    const message = createBaseActiveBid();
    message.deploymentId = object.deploymentId ?? 0;
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
