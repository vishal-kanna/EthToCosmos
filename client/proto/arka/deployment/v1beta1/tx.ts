// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: arka/deployment/v1beta1/tx.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { DeploymentStatus, deploymentStatusFromJSON, deploymentStatusToJSON } from "./deployment";

export const protobufPackage = "arka.deployment.v1beta1";

/** MsgCreateDeployment defines the Msg/CreateDeployment request type. */
export interface MsgCreateDeployment {
  /** agent_id is the unique id of the created agent in agenthub module */
  agentId: number;
  /** inference_price is the amount to be paid to the agent owner on each inference request. */
  inferencePrice:
    | Coin
    | undefined;
  /** expiration defines the time of expiration of the agent */
  expiration:
    | Date
    | undefined;
  /** sender is the account adderss of the agent owner */
  sender: string;
  /** escrow_amount is the amount which will be payed to the deployed host. */
  escrowAmount: Coin[];
}

/** MsgCreateDeploymentResponse defines the Msg/CreateDeployment response type. */
export interface MsgCreateDeploymentResponse {
}

/** MsgUpdateDeployment defines the Msg/UpdateDeployment request type. */
export interface MsgUpdateDeployment {
  /** id is the unique id of the deployment */
  id: number;
  /** sender is the host of the deployment */
  sender: string;
  /** deployment_status is the status of the deployment */
  deploymentStatus: DeploymentStatus;
}

/** MsgCreateDeploymentResponse defines the Msg/CreateDeployment response type. */
export interface MsgUpdateDeploymentResponse {
}

/** MsgBid defines the Msg/Bid request type. */
export interface MsgBid {
  /** deployment_id is the unique ID of the deployment for which the bid is placed */
  deploymentId: number;
  /** bidder is the account address of the bidder */
  bidder: string;
  /** price is the bid amount in coins */
  price: Coin | undefined;
}

/** MsgBidResponse defines the Msg/Bid response type. */
export interface MsgBidResponse {
}

/** MsgAcceptBid defines the Msg/AcceptBid request type. */
export interface MsgAcceptBid {
  /** bid_id is the unique ID of the bid being accepted */
  bidId: number;
  /** sender is the account address of the entity accepting the bid */
  sender: string;
}

/** MsgAcceptBidResponse defines the Msg/AcceptBid response type. */
export interface MsgAcceptBidResponse {
}

/** MsgSubmitInference defines the Msg/SubmitInference request type. */
export interface MsgSubmitInference {
  /** deployment_id is the unique ID of the deployment for which the inference is submitted */
  deploymentId: number;
  /** request contains the inference request data */
  request: Uint8Array;
  /** sender is the account address of the entity submitting the inference */
  sender: string;
}

/** MsgSubmitInference defines the Msg/SubmitInference response type. */
export interface MsgSubmitInferenceResponse {
}

/** MsgSubmitInferenceResult defines the Msg/SubmitInferenceResult request type. */
export interface MsgSubmitInferenceResult {
  /** deployment_id is the unique ID of the deployment for which the inference result is submitted */
  deploymentId: number;
  /** result contains the inference result data */
  result: Uint8Array;
  /** sender is the account address of the entity submitting the inference result */
  sender: string;
  /** creator is the account address of the inference owner */
  creator: string;
  /** inference_id is the unique ID of the inference */
  inferenceId: number;
  /** checksum is the checksum of the inference result */
  checksum: string;
}

/** MsgSubmitInferenceResultResponse defines the Msg/SubmitInferenceResult response type. */
export interface MsgSubmitInferenceResultResponse {
}

/** MsgConvertToNFT defines the Msg/ConvertToNFT request type. */
export interface MsgConvertToNFT {
  /** inference_id is the unique ID of the inference being converted to an NFT */
  inferenceId: number;
  /** sender is the account address of the user converting the inference to an NFT */
  sender: string;
  /** deployment_id is the unique ID of the deployment related to the inference */
  deploymentId: number;
  /** agent_id is the unique ID of the agent related to the inference */
  agentId: number;
  /** class_id is the class ID for the NFT */
  classId: string;
}

/** MsgConvertToNFTResponse defines the Msg/ConvertToNFT response type. */
export interface MsgConvertToNFTResponse {
}

/** MsgFundDeployment defines the Msg/FundDeployment request type. */
export interface MsgFundDeployment {
  /** deployment_id is the unique ID of the deployment */
  deploymentId: number;
  /** sender is the account address of the deployment owner */
  sender: string;
  /** amount is the escrow amount in coins */
  amount: Coin[];
}

/** MsgFundDeploymentResponse defines the Msg/FundDeployment response type. */
export interface MsgFundDeploymentResponse {
}

function createBaseMsgCreateDeployment(): MsgCreateDeployment {
  return { agentId: 0, inferencePrice: undefined, expiration: undefined, sender: "", escrowAmount: [] };
}

export const MsgCreateDeployment = {
  encode(message: MsgCreateDeployment, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.agentId !== 0) {
      writer.uint32(8).uint64(message.agentId);
    }
    if (message.inferencePrice !== undefined) {
      Coin.encode(message.inferencePrice, writer.uint32(18).fork()).ldelim();
    }
    if (message.expiration !== undefined) {
      Timestamp.encode(toTimestamp(message.expiration), writer.uint32(26).fork()).ldelim();
    }
    if (message.sender !== "") {
      writer.uint32(34).string(message.sender);
    }
    for (const v of message.escrowAmount) {
      Coin.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateDeployment {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateDeployment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.agentId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.inferencePrice = Coin.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.expiration = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.escrowAmount.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateDeployment {
    return {
      agentId: isSet(object.agentId) ? globalThis.Number(object.agentId) : 0,
      inferencePrice: isSet(object.inferencePrice) ? Coin.fromJSON(object.inferencePrice) : undefined,
      expiration: isSet(object.expiration) ? fromJsonTimestamp(object.expiration) : undefined,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      escrowAmount: globalThis.Array.isArray(object?.escrowAmount)
        ? object.escrowAmount.map((e: any) => Coin.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MsgCreateDeployment): unknown {
    const obj: any = {};
    if (message.agentId !== 0) {
      obj.agentId = Math.round(message.agentId);
    }
    if (message.inferencePrice !== undefined) {
      obj.inferencePrice = Coin.toJSON(message.inferencePrice);
    }
    if (message.expiration !== undefined) {
      obj.expiration = message.expiration.toISOString();
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.escrowAmount?.length) {
      obj.escrowAmount = message.escrowAmount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateDeployment>, I>>(base?: I): MsgCreateDeployment {
    return MsgCreateDeployment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateDeployment>, I>>(object: I): MsgCreateDeployment {
    const message = createBaseMsgCreateDeployment();
    message.agentId = object.agentId ?? 0;
    message.inferencePrice = (object.inferencePrice !== undefined && object.inferencePrice !== null)
      ? Coin.fromPartial(object.inferencePrice)
      : undefined;
    message.expiration = object.expiration ?? undefined;
    message.sender = object.sender ?? "";
    message.escrowAmount = object.escrowAmount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgCreateDeploymentResponse(): MsgCreateDeploymentResponse {
  return {};
}

export const MsgCreateDeploymentResponse = {
  encode(_: MsgCreateDeploymentResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateDeploymentResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateDeploymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateDeploymentResponse {
    return {};
  },

  toJSON(_: MsgCreateDeploymentResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateDeploymentResponse>, I>>(base?: I): MsgCreateDeploymentResponse {
    return MsgCreateDeploymentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateDeploymentResponse>, I>>(_: I): MsgCreateDeploymentResponse {
    const message = createBaseMsgCreateDeploymentResponse();
    return message;
  },
};

function createBaseMsgUpdateDeployment(): MsgUpdateDeployment {
  return { id: 0, sender: "", deploymentStatus: 0 };
}

export const MsgUpdateDeployment = {
  encode(message: MsgUpdateDeployment, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    if (message.deploymentStatus !== 0) {
      writer.uint32(24).int32(message.deploymentStatus);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateDeployment {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateDeployment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.deploymentStatus = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateDeployment {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      deploymentStatus: isSet(object.deploymentStatus) ? deploymentStatusFromJSON(object.deploymentStatus) : 0,
    };
  },

  toJSON(message: MsgUpdateDeployment): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.deploymentStatus !== 0) {
      obj.deploymentStatus = deploymentStatusToJSON(message.deploymentStatus);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateDeployment>, I>>(base?: I): MsgUpdateDeployment {
    return MsgUpdateDeployment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateDeployment>, I>>(object: I): MsgUpdateDeployment {
    const message = createBaseMsgUpdateDeployment();
    message.id = object.id ?? 0;
    message.sender = object.sender ?? "";
    message.deploymentStatus = object.deploymentStatus ?? 0;
    return message;
  },
};

function createBaseMsgUpdateDeploymentResponse(): MsgUpdateDeploymentResponse {
  return {};
}

export const MsgUpdateDeploymentResponse = {
  encode(_: MsgUpdateDeploymentResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateDeploymentResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateDeploymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateDeploymentResponse {
    return {};
  },

  toJSON(_: MsgUpdateDeploymentResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateDeploymentResponse>, I>>(base?: I): MsgUpdateDeploymentResponse {
    return MsgUpdateDeploymentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateDeploymentResponse>, I>>(_: I): MsgUpdateDeploymentResponse {
    const message = createBaseMsgUpdateDeploymentResponse();
    return message;
  },
};

function createBaseMsgBid(): MsgBid {
  return { deploymentId: 0, bidder: "", price: undefined };
}

export const MsgBid = {
  encode(message: MsgBid, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deploymentId !== 0) {
      writer.uint32(8).uint64(message.deploymentId);
    }
    if (message.bidder !== "") {
      writer.uint32(18).string(message.bidder);
    }
    if (message.price !== undefined) {
      Coin.encode(message.price, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgBid {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deploymentId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.bidder = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.price = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgBid {
    return {
      deploymentId: isSet(object.deploymentId) ? globalThis.Number(object.deploymentId) : 0,
      bidder: isSet(object.bidder) ? globalThis.String(object.bidder) : "",
      price: isSet(object.price) ? Coin.fromJSON(object.price) : undefined,
    };
  },

  toJSON(message: MsgBid): unknown {
    const obj: any = {};
    if (message.deploymentId !== 0) {
      obj.deploymentId = Math.round(message.deploymentId);
    }
    if (message.bidder !== "") {
      obj.bidder = message.bidder;
    }
    if (message.price !== undefined) {
      obj.price = Coin.toJSON(message.price);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgBid>, I>>(base?: I): MsgBid {
    return MsgBid.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgBid>, I>>(object: I): MsgBid {
    const message = createBaseMsgBid();
    message.deploymentId = object.deploymentId ?? 0;
    message.bidder = object.bidder ?? "";
    message.price = (object.price !== undefined && object.price !== null) ? Coin.fromPartial(object.price) : undefined;
    return message;
  },
};

function createBaseMsgBidResponse(): MsgBidResponse {
  return {};
}

export const MsgBidResponse = {
  encode(_: MsgBidResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgBidResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBidResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgBidResponse {
    return {};
  },

  toJSON(_: MsgBidResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgBidResponse>, I>>(base?: I): MsgBidResponse {
    return MsgBidResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgBidResponse>, I>>(_: I): MsgBidResponse {
    const message = createBaseMsgBidResponse();
    return message;
  },
};

function createBaseMsgAcceptBid(): MsgAcceptBid {
  return { bidId: 0, sender: "" };
}

export const MsgAcceptBid = {
  encode(message: MsgAcceptBid, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.bidId !== 0) {
      writer.uint32(8).uint64(message.bidId);
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAcceptBid {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAcceptBid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.bidId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAcceptBid {
    return {
      bidId: isSet(object.bidId) ? globalThis.Number(object.bidId) : 0,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgAcceptBid): unknown {
    const obj: any = {};
    if (message.bidId !== 0) {
      obj.bidId = Math.round(message.bidId);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAcceptBid>, I>>(base?: I): MsgAcceptBid {
    return MsgAcceptBid.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAcceptBid>, I>>(object: I): MsgAcceptBid {
    const message = createBaseMsgAcceptBid();
    message.bidId = object.bidId ?? 0;
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgAcceptBidResponse(): MsgAcceptBidResponse {
  return {};
}

export const MsgAcceptBidResponse = {
  encode(_: MsgAcceptBidResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAcceptBidResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAcceptBidResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAcceptBidResponse {
    return {};
  },

  toJSON(_: MsgAcceptBidResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAcceptBidResponse>, I>>(base?: I): MsgAcceptBidResponse {
    return MsgAcceptBidResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAcceptBidResponse>, I>>(_: I): MsgAcceptBidResponse {
    const message = createBaseMsgAcceptBidResponse();
    return message;
  },
};

function createBaseMsgSubmitInference(): MsgSubmitInference {
  return { deploymentId: 0, request: new Uint8Array(0), sender: "" };
}

export const MsgSubmitInference = {
  encode(message: MsgSubmitInference, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deploymentId !== 0) {
      writer.uint32(8).uint64(message.deploymentId);
    }
    if (message.request.length !== 0) {
      writer.uint32(18).bytes(message.request);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSubmitInference {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSubmitInference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deploymentId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.request = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSubmitInference {
    return {
      deploymentId: isSet(object.deploymentId) ? globalThis.Number(object.deploymentId) : 0,
      request: isSet(object.request) ? bytesFromBase64(object.request) : new Uint8Array(0),
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgSubmitInference): unknown {
    const obj: any = {};
    if (message.deploymentId !== 0) {
      obj.deploymentId = Math.round(message.deploymentId);
    }
    if (message.request.length !== 0) {
      obj.request = base64FromBytes(message.request);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSubmitInference>, I>>(base?: I): MsgSubmitInference {
    return MsgSubmitInference.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSubmitInference>, I>>(object: I): MsgSubmitInference {
    const message = createBaseMsgSubmitInference();
    message.deploymentId = object.deploymentId ?? 0;
    message.request = object.request ?? new Uint8Array(0);
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgSubmitInferenceResponse(): MsgSubmitInferenceResponse {
  return {};
}

export const MsgSubmitInferenceResponse = {
  encode(_: MsgSubmitInferenceResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSubmitInferenceResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSubmitInferenceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSubmitInferenceResponse {
    return {};
  },

  toJSON(_: MsgSubmitInferenceResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSubmitInferenceResponse>, I>>(base?: I): MsgSubmitInferenceResponse {
    return MsgSubmitInferenceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSubmitInferenceResponse>, I>>(_: I): MsgSubmitInferenceResponse {
    const message = createBaseMsgSubmitInferenceResponse();
    return message;
  },
};

function createBaseMsgSubmitInferenceResult(): MsgSubmitInferenceResult {
  return { deploymentId: 0, result: new Uint8Array(0), sender: "", creator: "", inferenceId: 0, checksum: "" };
}

export const MsgSubmitInferenceResult = {
  encode(message: MsgSubmitInferenceResult, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deploymentId !== 0) {
      writer.uint32(8).uint64(message.deploymentId);
    }
    if (message.result.length !== 0) {
      writer.uint32(18).bytes(message.result);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    if (message.creator !== "") {
      writer.uint32(34).string(message.creator);
    }
    if (message.inferenceId !== 0) {
      writer.uint32(40).uint64(message.inferenceId);
    }
    if (message.checksum !== "") {
      writer.uint32(50).string(message.checksum);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSubmitInferenceResult {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSubmitInferenceResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deploymentId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.inferenceId = longToNumber(reader.uint64() as Long);
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.checksum = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSubmitInferenceResult {
    return {
      deploymentId: isSet(object.deploymentId) ? globalThis.Number(object.deploymentId) : 0,
      result: isSet(object.result) ? bytesFromBase64(object.result) : new Uint8Array(0),
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      inferenceId: isSet(object.inferenceId) ? globalThis.Number(object.inferenceId) : 0,
      checksum: isSet(object.checksum) ? globalThis.String(object.checksum) : "",
    };
  },

  toJSON(message: MsgSubmitInferenceResult): unknown {
    const obj: any = {};
    if (message.deploymentId !== 0) {
      obj.deploymentId = Math.round(message.deploymentId);
    }
    if (message.result.length !== 0) {
      obj.result = base64FromBytes(message.result);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.inferenceId !== 0) {
      obj.inferenceId = Math.round(message.inferenceId);
    }
    if (message.checksum !== "") {
      obj.checksum = message.checksum;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSubmitInferenceResult>, I>>(base?: I): MsgSubmitInferenceResult {
    return MsgSubmitInferenceResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSubmitInferenceResult>, I>>(object: I): MsgSubmitInferenceResult {
    const message = createBaseMsgSubmitInferenceResult();
    message.deploymentId = object.deploymentId ?? 0;
    message.result = object.result ?? new Uint8Array(0);
    message.sender = object.sender ?? "";
    message.creator = object.creator ?? "";
    message.inferenceId = object.inferenceId ?? 0;
    message.checksum = object.checksum ?? "";
    return message;
  },
};

function createBaseMsgSubmitInferenceResultResponse(): MsgSubmitInferenceResultResponse {
  return {};
}

export const MsgSubmitInferenceResultResponse = {
  encode(_: MsgSubmitInferenceResultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSubmitInferenceResultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSubmitInferenceResultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSubmitInferenceResultResponse {
    return {};
  },

  toJSON(_: MsgSubmitInferenceResultResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSubmitInferenceResultResponse>, I>>(
    base?: I,
  ): MsgSubmitInferenceResultResponse {
    return MsgSubmitInferenceResultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSubmitInferenceResultResponse>, I>>(
    _: I,
  ): MsgSubmitInferenceResultResponse {
    const message = createBaseMsgSubmitInferenceResultResponse();
    return message;
  },
};

function createBaseMsgConvertToNFT(): MsgConvertToNFT {
  return { inferenceId: 0, sender: "", deploymentId: 0, agentId: 0, classId: "" };
}

export const MsgConvertToNFT = {
  encode(message: MsgConvertToNFT, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.inferenceId !== 0) {
      writer.uint32(8).uint64(message.inferenceId);
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    if (message.deploymentId !== 0) {
      writer.uint32(24).uint64(message.deploymentId);
    }
    if (message.agentId !== 0) {
      writer.uint32(32).uint64(message.agentId);
    }
    if (message.classId !== "") {
      writer.uint32(42).string(message.classId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgConvertToNFT {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgConvertToNFT();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.inferenceId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.deploymentId = longToNumber(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.agentId = longToNumber(reader.uint64() as Long);
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.classId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgConvertToNFT {
    return {
      inferenceId: isSet(object.inferenceId) ? globalThis.Number(object.inferenceId) : 0,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      deploymentId: isSet(object.deploymentId) ? globalThis.Number(object.deploymentId) : 0,
      agentId: isSet(object.agentId) ? globalThis.Number(object.agentId) : 0,
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
    };
  },

  toJSON(message: MsgConvertToNFT): unknown {
    const obj: any = {};
    if (message.inferenceId !== 0) {
      obj.inferenceId = Math.round(message.inferenceId);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.deploymentId !== 0) {
      obj.deploymentId = Math.round(message.deploymentId);
    }
    if (message.agentId !== 0) {
      obj.agentId = Math.round(message.agentId);
    }
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgConvertToNFT>, I>>(base?: I): MsgConvertToNFT {
    return MsgConvertToNFT.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgConvertToNFT>, I>>(object: I): MsgConvertToNFT {
    const message = createBaseMsgConvertToNFT();
    message.inferenceId = object.inferenceId ?? 0;
    message.sender = object.sender ?? "";
    message.deploymentId = object.deploymentId ?? 0;
    message.agentId = object.agentId ?? 0;
    message.classId = object.classId ?? "";
    return message;
  },
};

function createBaseMsgConvertToNFTResponse(): MsgConvertToNFTResponse {
  return {};
}

export const MsgConvertToNFTResponse = {
  encode(_: MsgConvertToNFTResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgConvertToNFTResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgConvertToNFTResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgConvertToNFTResponse {
    return {};
  },

  toJSON(_: MsgConvertToNFTResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgConvertToNFTResponse>, I>>(base?: I): MsgConvertToNFTResponse {
    return MsgConvertToNFTResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgConvertToNFTResponse>, I>>(_: I): MsgConvertToNFTResponse {
    const message = createBaseMsgConvertToNFTResponse();
    return message;
  },
};

function createBaseMsgFundDeployment(): MsgFundDeployment {
  return { deploymentId: 0, sender: "", amount: [] };
}

export const MsgFundDeployment = {
  encode(message: MsgFundDeployment, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deploymentId !== 0) {
      writer.uint32(8).uint64(message.deploymentId);
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgFundDeployment {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgFundDeployment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deploymentId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgFundDeployment {
    return {
      deploymentId: isSet(object.deploymentId) ? globalThis.Number(object.deploymentId) : 0,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      amount: globalThis.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgFundDeployment): unknown {
    const obj: any = {};
    if (message.deploymentId !== 0) {
      obj.deploymentId = Math.round(message.deploymentId);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgFundDeployment>, I>>(base?: I): MsgFundDeployment {
    return MsgFundDeployment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgFundDeployment>, I>>(object: I): MsgFundDeployment {
    const message = createBaseMsgFundDeployment();
    message.deploymentId = object.deploymentId ?? 0;
    message.sender = object.sender ?? "";
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgFundDeploymentResponse(): MsgFundDeploymentResponse {
  return {};
}

export const MsgFundDeploymentResponse = {
  encode(_: MsgFundDeploymentResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgFundDeploymentResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgFundDeploymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgFundDeploymentResponse {
    return {};
  },

  toJSON(_: MsgFundDeploymentResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgFundDeploymentResponse>, I>>(base?: I): MsgFundDeploymentResponse {
    return MsgFundDeploymentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgFundDeploymentResponse>, I>>(_: I): MsgFundDeploymentResponse {
    const message = createBaseMsgFundDeploymentResponse();
    return message;
  },
};

/** Msg defines the Deployment Msg service. */
export interface Msg {
  /** CreateDeployment defines a method to create a new deployment */
  CreateDeployment(request: MsgCreateDeployment): Promise<MsgCreateDeploymentResponse>;
  /** UpdateDeployment defines a method to update an existing deployment */
  UpdateDeployment(request: MsgUpdateDeployment): Promise<MsgUpdateDeploymentResponse>;
  /** Bid defines a method to palce a bid on active deployment */
  Bid(request: MsgBid): Promise<MsgBidResponse>;
  /** AcceptBid defines a method to accept deployment */
  AcceptBid(request: MsgAcceptBid): Promise<MsgAcceptBidResponse>;
  /** SubmitInference defines */
  SubmitInference(request: MsgSubmitInference): Promise<MsgSubmitInferenceResponse>;
  /** SubmitInferenceResult defines */
  SubmitInferenceResult(request: MsgSubmitInferenceResult): Promise<MsgSubmitInferenceResultResponse>;
  /** ConvertToNFT allows user to convert agent result to NFT */
  ConvertToNFT(request: MsgConvertToNFT): Promise<MsgConvertToNFTResponse>;
  /** FundDeployment allows user to deposit amount to escrow account */
  FundDeployment(request: MsgFundDeployment): Promise<MsgFundDeploymentResponse>;
}

export const MsgServiceName = "arka.deployment.v1beta1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.CreateDeployment = this.CreateDeployment.bind(this);
    this.UpdateDeployment = this.UpdateDeployment.bind(this);
    this.Bid = this.Bid.bind(this);
    this.AcceptBid = this.AcceptBid.bind(this);
    this.SubmitInference = this.SubmitInference.bind(this);
    this.SubmitInferenceResult = this.SubmitInferenceResult.bind(this);
    this.ConvertToNFT = this.ConvertToNFT.bind(this);
    this.FundDeployment = this.FundDeployment.bind(this);
  }
  CreateDeployment(request: MsgCreateDeployment): Promise<MsgCreateDeploymentResponse> {
    const data = MsgCreateDeployment.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateDeployment", data);
    return promise.then((data) => MsgCreateDeploymentResponse.decode(_m0.Reader.create(data)));
  }

  UpdateDeployment(request: MsgUpdateDeployment): Promise<MsgUpdateDeploymentResponse> {
    const data = MsgUpdateDeployment.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateDeployment", data);
    return promise.then((data) => MsgUpdateDeploymentResponse.decode(_m0.Reader.create(data)));
  }

  Bid(request: MsgBid): Promise<MsgBidResponse> {
    const data = MsgBid.encode(request).finish();
    const promise = this.rpc.request(this.service, "Bid", data);
    return promise.then((data) => MsgBidResponse.decode(_m0.Reader.create(data)));
  }

  AcceptBid(request: MsgAcceptBid): Promise<MsgAcceptBidResponse> {
    const data = MsgAcceptBid.encode(request).finish();
    const promise = this.rpc.request(this.service, "AcceptBid", data);
    return promise.then((data) => MsgAcceptBidResponse.decode(_m0.Reader.create(data)));
  }

  SubmitInference(request: MsgSubmitInference): Promise<MsgSubmitInferenceResponse> {
    const data = MsgSubmitInference.encode(request).finish();
    const promise = this.rpc.request(this.service, "SubmitInference", data);
    return promise.then((data) => MsgSubmitInferenceResponse.decode(_m0.Reader.create(data)));
  }

  SubmitInferenceResult(request: MsgSubmitInferenceResult): Promise<MsgSubmitInferenceResultResponse> {
    const data = MsgSubmitInferenceResult.encode(request).finish();
    const promise = this.rpc.request(this.service, "SubmitInferenceResult", data);
    return promise.then((data) => MsgSubmitInferenceResultResponse.decode(_m0.Reader.create(data)));
  }

  ConvertToNFT(request: MsgConvertToNFT): Promise<MsgConvertToNFTResponse> {
    const data = MsgConvertToNFT.encode(request).finish();
    const promise = this.rpc.request(this.service, "ConvertToNFT", data);
    return promise.then((data) => MsgConvertToNFTResponse.decode(_m0.Reader.create(data)));
  }

  FundDeployment(request: MsgFundDeployment): Promise<MsgFundDeploymentResponse> {
    const data = MsgFundDeployment.encode(request).finish();
    const promise = this.rpc.request(this.service, "FundDeployment", data);
    return promise.then((data) => MsgFundDeploymentResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
