// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: arka/deployment/v1beta1/query.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Bid, Deployment, Inference } from "./deployment";

export const protobufPackage = "arka.deployment.v1beta1";

/** QueryDeploymentsRequest is the request type for the Query/Deployment RPC method. */
export interface QueryDeploymentsRequest {
  /** pagination defines an pagination for the request. */
  pagination:
    | PageRequest
    | undefined;
  /** host is the account address of the deployment */
  host: string;
}

/** QueryDeploymentsResponse is the response type for the Query/Deployment RPC method. */
export interface QueryDeploymentsResponse {
  /** agents defines list of deployments */
  deployments: Deployment[];
  /** pagination defines an pagination for the response. */
  pagination: PageResponse | undefined;
}

/** QueryDeploymentRequest is the request type for the Query/Deployment RPC method. */
export interface QueryDeploymentRequest {
  /** id is the unique id of the deployment */
  id: number;
}

/** QueryDeploymentResponse is the response type for the Query/Deployment RPC method. */
export interface QueryDeploymentResponse {
  /** deployment holds deployment details */
  deployment: Deployment | undefined;
}

/** QueryBidsRequest is the request type for the Query/Bids RPC method. */
export interface QueryBidsRequest {
  /** pagination defines an pagination for the request. */
  pagination: PageRequest | undefined;
}

/** QueryBidsRequest is the response type for the Query/Bids RPC method. */
export interface QueryBidsResponse {
  /** bids defines list of bids */
  bids: Bid[];
  /** pagination defines an pagination for the response. */
  pagination: PageResponse | undefined;
}

/** QueryBidRequest is the request type for the Query/Bid RPC method. */
export interface QueryBidRequest {
  /** id is the unique id of the deployment */
  creator: string;
  /** id is the unique id of the bid */
  id: number;
}

/** QueryBidResponse is the response type for the Query/Bid RPC method. */
export interface QueryBidResponse {
  /** bid holds bid details */
  bid: Bid | undefined;
}

/** QueryInferencesRequest is the request type for the Query/Inferences RPC method. */
export interface QueryInferencesRequest {
  deploymentId: number;
  creator: string;
  /** pagination defines an pagination for the request. */
  pagination: PageRequest | undefined;
}

/** QueryInferencesResponse is the response type for the Query/Inferences RPC method. */
export interface QueryInferencesResponse {
  /** inferences defines list of inferences */
  inferences: Inference[];
  /** pagination defines an pagination for the response. */
  pagination: PageResponse | undefined;
}

/** QueryInferenceRequest is the request type for the Query/Inference RPC method. */
export interface QueryInferenceRequest {
  /** id is the unique id of the deployment */
  deploymentId: number;
  id: number;
  creator: string;
}

/** QueryBidResponse is the response type for the Query/Inference RPC method. */
export interface QueryInferenceResponse {
  /** inference holds inference details */
  inference: Inference | undefined;
}

function createBaseQueryDeploymentsRequest(): QueryDeploymentsRequest {
  return { pagination: undefined, host: "" };
}

export const QueryDeploymentsRequest = {
  encode(message: QueryDeploymentsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.host !== "") {
      writer.uint32(18).string(message.host);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryDeploymentsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDeploymentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.host = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDeploymentsRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      host: isSet(object.host) ? globalThis.String(object.host) : "",
    };
  },

  toJSON(message: QueryDeploymentsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryDeploymentsRequest>, I>>(base?: I): QueryDeploymentsRequest {
    return QueryDeploymentsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryDeploymentsRequest>, I>>(object: I): QueryDeploymentsRequest {
    const message = createBaseQueryDeploymentsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.host = object.host ?? "";
    return message;
  },
};

function createBaseQueryDeploymentsResponse(): QueryDeploymentsResponse {
  return { deployments: [], pagination: undefined };
}

export const QueryDeploymentsResponse = {
  encode(message: QueryDeploymentsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.deployments) {
      Deployment.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryDeploymentsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDeploymentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deployments.push(Deployment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDeploymentsResponse {
    return {
      deployments: globalThis.Array.isArray(object?.deployments)
        ? object.deployments.map((e: any) => Deployment.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDeploymentsResponse): unknown {
    const obj: any = {};
    if (message.deployments?.length) {
      obj.deployments = message.deployments.map((e) => Deployment.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryDeploymentsResponse>, I>>(base?: I): QueryDeploymentsResponse {
    return QueryDeploymentsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryDeploymentsResponse>, I>>(object: I): QueryDeploymentsResponse {
    const message = createBaseQueryDeploymentsResponse();
    message.deployments = object.deployments?.map((e) => Deployment.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDeploymentRequest(): QueryDeploymentRequest {
  return { id: 0 };
}

export const QueryDeploymentRequest = {
  encode(message: QueryDeploymentRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryDeploymentRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDeploymentRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: QueryDeploymentRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryDeploymentRequest>, I>>(base?: I): QueryDeploymentRequest {
    return QueryDeploymentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryDeploymentRequest>, I>>(object: I): QueryDeploymentRequest {
    const message = createBaseQueryDeploymentRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseQueryDeploymentResponse(): QueryDeploymentResponse {
  return { deployment: undefined };
}

export const QueryDeploymentResponse = {
  encode(message: QueryDeploymentResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deployment !== undefined) {
      Deployment.encode(message.deployment, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryDeploymentResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDeploymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deployment = Deployment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDeploymentResponse {
    return { deployment: isSet(object.deployment) ? Deployment.fromJSON(object.deployment) : undefined };
  },

  toJSON(message: QueryDeploymentResponse): unknown {
    const obj: any = {};
    if (message.deployment !== undefined) {
      obj.deployment = Deployment.toJSON(message.deployment);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryDeploymentResponse>, I>>(base?: I): QueryDeploymentResponse {
    return QueryDeploymentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryDeploymentResponse>, I>>(object: I): QueryDeploymentResponse {
    const message = createBaseQueryDeploymentResponse();
    message.deployment = (object.deployment !== undefined && object.deployment !== null)
      ? Deployment.fromPartial(object.deployment)
      : undefined;
    return message;
  },
};

function createBaseQueryBidsRequest(): QueryBidsRequest {
  return { pagination: undefined };
}

export const QueryBidsRequest = {
  encode(message: QueryBidsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryBidsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBidsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBidsRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryBidsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBidsRequest>, I>>(base?: I): QueryBidsRequest {
    return QueryBidsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBidsRequest>, I>>(object: I): QueryBidsRequest {
    const message = createBaseQueryBidsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryBidsResponse(): QueryBidsResponse {
  return { bids: [], pagination: undefined };
}

export const QueryBidsResponse = {
  encode(message: QueryBidsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.bids) {
      Bid.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryBidsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBidsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bids.push(Bid.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBidsResponse {
    return {
      bids: globalThis.Array.isArray(object?.bids) ? object.bids.map((e: any) => Bid.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryBidsResponse): unknown {
    const obj: any = {};
    if (message.bids?.length) {
      obj.bids = message.bids.map((e) => Bid.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBidsResponse>, I>>(base?: I): QueryBidsResponse {
    return QueryBidsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBidsResponse>, I>>(object: I): QueryBidsResponse {
    const message = createBaseQueryBidsResponse();
    message.bids = object.bids?.map((e) => Bid.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryBidRequest(): QueryBidRequest {
  return { creator: "", id: 0 };
}

export const QueryBidRequest = {
  encode(message: QueryBidRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.id !== 0) {
      writer.uint32(16).uint64(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryBidRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBidRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBidRequest {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
    };
  },

  toJSON(message: QueryBidRequest): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBidRequest>, I>>(base?: I): QueryBidRequest {
    return QueryBidRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBidRequest>, I>>(object: I): QueryBidRequest {
    const message = createBaseQueryBidRequest();
    message.creator = object.creator ?? "";
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseQueryBidResponse(): QueryBidResponse {
  return { bid: undefined };
}

export const QueryBidResponse = {
  encode(message: QueryBidResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.bid !== undefined) {
      Bid.encode(message.bid, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryBidResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBidResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bid = Bid.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBidResponse {
    return { bid: isSet(object.bid) ? Bid.fromJSON(object.bid) : undefined };
  },

  toJSON(message: QueryBidResponse): unknown {
    const obj: any = {};
    if (message.bid !== undefined) {
      obj.bid = Bid.toJSON(message.bid);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBidResponse>, I>>(base?: I): QueryBidResponse {
    return QueryBidResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBidResponse>, I>>(object: I): QueryBidResponse {
    const message = createBaseQueryBidResponse();
    message.bid = (object.bid !== undefined && object.bid !== null) ? Bid.fromPartial(object.bid) : undefined;
    return message;
  },
};

function createBaseQueryInferencesRequest(): QueryInferencesRequest {
  return { deploymentId: 0, creator: "", pagination: undefined };
}

export const QueryInferencesRequest = {
  encode(message: QueryInferencesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deploymentId !== 0) {
      writer.uint32(8).uint64(message.deploymentId);
    }
    if (message.creator !== "") {
      writer.uint32(18).string(message.creator);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryInferencesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInferencesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deploymentId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryInferencesRequest {
    return {
      deploymentId: isSet(object.deploymentId) ? globalThis.Number(object.deploymentId) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryInferencesRequest): unknown {
    const obj: any = {};
    if (message.deploymentId !== 0) {
      obj.deploymentId = Math.round(message.deploymentId);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryInferencesRequest>, I>>(base?: I): QueryInferencesRequest {
    return QueryInferencesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryInferencesRequest>, I>>(object: I): QueryInferencesRequest {
    const message = createBaseQueryInferencesRequest();
    message.deploymentId = object.deploymentId ?? 0;
    message.creator = object.creator ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryInferencesResponse(): QueryInferencesResponse {
  return { inferences: [], pagination: undefined };
}

export const QueryInferencesResponse = {
  encode(message: QueryInferencesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.inferences) {
      Inference.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryInferencesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInferencesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inferences.push(Inference.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryInferencesResponse {
    return {
      inferences: globalThis.Array.isArray(object?.inferences)
        ? object.inferences.map((e: any) => Inference.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryInferencesResponse): unknown {
    const obj: any = {};
    if (message.inferences?.length) {
      obj.inferences = message.inferences.map((e) => Inference.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryInferencesResponse>, I>>(base?: I): QueryInferencesResponse {
    return QueryInferencesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryInferencesResponse>, I>>(object: I): QueryInferencesResponse {
    const message = createBaseQueryInferencesResponse();
    message.inferences = object.inferences?.map((e) => Inference.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryInferenceRequest(): QueryInferenceRequest {
  return { deploymentId: 0, id: 0, creator: "" };
}

export const QueryInferenceRequest = {
  encode(message: QueryInferenceRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deploymentId !== 0) {
      writer.uint32(8).uint64(message.deploymentId);
    }
    if (message.id !== 0) {
      writer.uint32(16).uint64(message.id);
    }
    if (message.creator !== "") {
      writer.uint32(26).string(message.creator);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryInferenceRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInferenceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deploymentId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.creator = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryInferenceRequest {
    return {
      deploymentId: isSet(object.deploymentId) ? globalThis.Number(object.deploymentId) : 0,
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: QueryInferenceRequest): unknown {
    const obj: any = {};
    if (message.deploymentId !== 0) {
      obj.deploymentId = Math.round(message.deploymentId);
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryInferenceRequest>, I>>(base?: I): QueryInferenceRequest {
    return QueryInferenceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryInferenceRequest>, I>>(object: I): QueryInferenceRequest {
    const message = createBaseQueryInferenceRequest();
    message.deploymentId = object.deploymentId ?? 0;
    message.id = object.id ?? 0;
    message.creator = object.creator ?? "";
    return message;
  },
};

function createBaseQueryInferenceResponse(): QueryInferenceResponse {
  return { inference: undefined };
}

export const QueryInferenceResponse = {
  encode(message: QueryInferenceResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.inference !== undefined) {
      Inference.encode(message.inference, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryInferenceResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInferenceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inference = Inference.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryInferenceResponse {
    return { inference: isSet(object.inference) ? Inference.fromJSON(object.inference) : undefined };
  },

  toJSON(message: QueryInferenceResponse): unknown {
    const obj: any = {};
    if (message.inference !== undefined) {
      obj.inference = Inference.toJSON(message.inference);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryInferenceResponse>, I>>(base?: I): QueryInferenceResponse {
    return QueryInferenceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryInferenceResponse>, I>>(object: I): QueryInferenceResponse {
    const message = createBaseQueryInferenceResponse();
    message.inference = (object.inference !== undefined && object.inference !== null)
      ? Inference.fromPartial(object.inference)
      : undefined;
    return message;
  },
};

/** GenesisState defines the deployment module's queries. */
export interface Query {
  /** Returns list of deployments. */
  Deployments(request: QueryDeploymentsRequest): Promise<QueryDeploymentsResponse>;
  /** Returns deployment details. */
  Deployment(request: QueryDeploymentRequest): Promise<QueryDeploymentResponse>;
  /** Returns bids details. */
  Bids(request: QueryBidsRequest): Promise<QueryBidsResponse>;
  /** Returns bid details. */
  Bid(request: QueryBidRequest): Promise<QueryBidResponse>;
  /** Inferences returns list of agent inference results for a given deployment id */
  Inferences(request: QueryInferencesRequest): Promise<QueryInferencesResponse>;
  /** Inference returns agent inference results for a given deployment id */
  Inference(request: QueryInferenceRequest): Promise<QueryInferenceResponse>;
}

export const QueryServiceName = "arka.deployment.v1beta1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Deployments = this.Deployments.bind(this);
    this.Deployment = this.Deployment.bind(this);
    this.Bids = this.Bids.bind(this);
    this.Bid = this.Bid.bind(this);
    this.Inferences = this.Inferences.bind(this);
    this.Inference = this.Inference.bind(this);
  }
  Deployments(request: QueryDeploymentsRequest): Promise<QueryDeploymentsResponse> {
    const data = QueryDeploymentsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Deployments", data);
    return promise.then((data) => QueryDeploymentsResponse.decode(_m0.Reader.create(data)));
  }

  Deployment(request: QueryDeploymentRequest): Promise<QueryDeploymentResponse> {
    const data = QueryDeploymentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Deployment", data);
    return promise.then((data) => QueryDeploymentResponse.decode(_m0.Reader.create(data)));
  }

  Bids(request: QueryBidsRequest): Promise<QueryBidsResponse> {
    const data = QueryBidsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Bids", data);
    return promise.then((data) => QueryBidsResponse.decode(_m0.Reader.create(data)));
  }

  Bid(request: QueryBidRequest): Promise<QueryBidResponse> {
    const data = QueryBidRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Bid", data);
    return promise.then((data) => QueryBidResponse.decode(_m0.Reader.create(data)));
  }

  Inferences(request: QueryInferencesRequest): Promise<QueryInferencesResponse> {
    const data = QueryInferencesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Inferences", data);
    return promise.then((data) => QueryInferencesResponse.decode(_m0.Reader.create(data)));
  }

  Inference(request: QueryInferenceRequest): Promise<QueryInferenceResponse> {
    const data = QueryInferenceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Inference", data);
    return promise.then((data) => QueryInferenceResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
