// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: arka/marketplace/v1beta1/tx.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "arka.marketplace.v1beta1";

/** MsgList defines the Msg/List request type. */
export interface MsgList {
  classId: string;
  nftId: string;
  agentId: number;
  price: Coin[];
  expiration: Date | undefined;
  sender: string;
}

/** MsgList defines the Msg/List response type. */
export interface MsgListResponse {
}

/** MsgDelist defines the Msg/Delist request type. */
export interface MsgDelist {
  classId: string;
  nftId: string;
  sender: string;
}

/** MsgDelistResponse defines the Msg/Delist response type. */
export interface MsgDelistResponse {
}

/** MsgUpdate defines the Msg/Update request type. */
export interface MsgUpdate {
  classId: string;
  nftId: string;
  agentId: number;
  price: Coin[];
  expiration: Date | undefined;
  sender: string;
}

/** MsgUpdateResponse defines the Msg/Update response type. */
export interface MsgUpdateResponse {
}

/** MsgBuy defines the Msg/Buy request type. */
export interface MsgBuy {
  /** class_id is NFT class id */
  classId: string;
  /** nft_id is the AI NFT id */
  nftId: string;
  sender: string;
}

/** MsgBuyResponse defines the Msg/Buy response type. */
export interface MsgBuyResponse {
}

/** MsgSetBid defines the Msg/SetBid request type. */
export interface MsgSetBid {
  classId: string;
  nftId: string;
  price: Coin[];
  expiration: Date | undefined;
  sender: string;
}

/** MsgSetBidResponse defines the Msg/SetBid response type. */
export interface MsgSetBidResponse {
}

/** MsgCancelBid defines the Msg/CancelBid request type. */
export interface MsgCancelBid {
  classId: string;
  nftId: string;
  sender: string;
}

/** MsgCancelBidResponse defines the Msg/CancelBid response type. */
export interface MsgCancelBidResponse {
}

/** MsgAcceptBid defines the Msg/AcceptBid request type. */
export interface MsgAcceptBid {
  classId: string;
  nftId: string;
  sender: string;
  bidder: string;
}

/** MsgAcceptBidResponse defines the Msg/AcceptBid response type. */
export interface MsgAcceptBidResponse {
}

/** MsgRejectBid defines the Msg/RejectBid request type. */
export interface MsgRejectBid {
  classId: string;
  nftId: string;
  bidder: string;
  sender: string;
}

/** MsgRejectBidResponse defines the Msg/RejectBid response type. */
export interface MsgRejectBidResponse {
}

function createBaseMsgList(): MsgList {
  return { classId: "", nftId: "", agentId: 0, price: [], expiration: undefined, sender: "" };
}

export const MsgList = {
  encode(message: MsgList, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.classId !== "") {
      writer.uint32(10).string(message.classId);
    }
    if (message.nftId !== "") {
      writer.uint32(18).string(message.nftId);
    }
    if (message.agentId !== 0) {
      writer.uint32(24).uint64(message.agentId);
    }
    for (const v of message.price) {
      Coin.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    if (message.expiration !== undefined) {
      Timestamp.encode(toTimestamp(message.expiration), writer.uint32(42).fork()).ldelim();
    }
    if (message.sender !== "") {
      writer.uint32(50).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgList {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.classId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nftId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.agentId = longToNumber(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.price.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.expiration = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgList {
    return {
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      nftId: isSet(object.nftId) ? globalThis.String(object.nftId) : "",
      agentId: isSet(object.agentId) ? globalThis.Number(object.agentId) : 0,
      price: globalThis.Array.isArray(object?.price) ? object.price.map((e: any) => Coin.fromJSON(e)) : [],
      expiration: isSet(object.expiration) ? fromJsonTimestamp(object.expiration) : undefined,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgList): unknown {
    const obj: any = {};
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.nftId !== "") {
      obj.nftId = message.nftId;
    }
    if (message.agentId !== 0) {
      obj.agentId = Math.round(message.agentId);
    }
    if (message.price?.length) {
      obj.price = message.price.map((e) => Coin.toJSON(e));
    }
    if (message.expiration !== undefined) {
      obj.expiration = message.expiration.toISOString();
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgList>, I>>(base?: I): MsgList {
    return MsgList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgList>, I>>(object: I): MsgList {
    const message = createBaseMsgList();
    message.classId = object.classId ?? "";
    message.nftId = object.nftId ?? "";
    message.agentId = object.agentId ?? 0;
    message.price = object.price?.map((e) => Coin.fromPartial(e)) || [];
    message.expiration = object.expiration ?? undefined;
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgListResponse(): MsgListResponse {
  return {};
}

export const MsgListResponse = {
  encode(_: MsgListResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgListResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgListResponse {
    return {};
  },

  toJSON(_: MsgListResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgListResponse>, I>>(base?: I): MsgListResponse {
    return MsgListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgListResponse>, I>>(_: I): MsgListResponse {
    const message = createBaseMsgListResponse();
    return message;
  },
};

function createBaseMsgDelist(): MsgDelist {
  return { classId: "", nftId: "", sender: "" };
}

export const MsgDelist = {
  encode(message: MsgDelist, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.classId !== "") {
      writer.uint32(10).string(message.classId);
    }
    if (message.nftId !== "") {
      writer.uint32(18).string(message.nftId);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgDelist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDelist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.classId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nftId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDelist {
    return {
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      nftId: isSet(object.nftId) ? globalThis.String(object.nftId) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgDelist): unknown {
    const obj: any = {};
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.nftId !== "") {
      obj.nftId = message.nftId;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDelist>, I>>(base?: I): MsgDelist {
    return MsgDelist.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDelist>, I>>(object: I): MsgDelist {
    const message = createBaseMsgDelist();
    message.classId = object.classId ?? "";
    message.nftId = object.nftId ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgDelistResponse(): MsgDelistResponse {
  return {};
}

export const MsgDelistResponse = {
  encode(_: MsgDelistResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgDelistResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDelistResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDelistResponse {
    return {};
  },

  toJSON(_: MsgDelistResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDelistResponse>, I>>(base?: I): MsgDelistResponse {
    return MsgDelistResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDelistResponse>, I>>(_: I): MsgDelistResponse {
    const message = createBaseMsgDelistResponse();
    return message;
  },
};

function createBaseMsgUpdate(): MsgUpdate {
  return { classId: "", nftId: "", agentId: 0, price: [], expiration: undefined, sender: "" };
}

export const MsgUpdate = {
  encode(message: MsgUpdate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.classId !== "") {
      writer.uint32(10).string(message.classId);
    }
    if (message.nftId !== "") {
      writer.uint32(18).string(message.nftId);
    }
    if (message.agentId !== 0) {
      writer.uint32(24).uint64(message.agentId);
    }
    for (const v of message.price) {
      Coin.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    if (message.expiration !== undefined) {
      Timestamp.encode(toTimestamp(message.expiration), writer.uint32(42).fork()).ldelim();
    }
    if (message.sender !== "") {
      writer.uint32(50).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.classId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nftId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.agentId = longToNumber(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.price.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.expiration = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdate {
    return {
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      nftId: isSet(object.nftId) ? globalThis.String(object.nftId) : "",
      agentId: isSet(object.agentId) ? globalThis.Number(object.agentId) : 0,
      price: globalThis.Array.isArray(object?.price) ? object.price.map((e: any) => Coin.fromJSON(e)) : [],
      expiration: isSet(object.expiration) ? fromJsonTimestamp(object.expiration) : undefined,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgUpdate): unknown {
    const obj: any = {};
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.nftId !== "") {
      obj.nftId = message.nftId;
    }
    if (message.agentId !== 0) {
      obj.agentId = Math.round(message.agentId);
    }
    if (message.price?.length) {
      obj.price = message.price.map((e) => Coin.toJSON(e));
    }
    if (message.expiration !== undefined) {
      obj.expiration = message.expiration.toISOString();
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdate>, I>>(base?: I): MsgUpdate {
    return MsgUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdate>, I>>(object: I): MsgUpdate {
    const message = createBaseMsgUpdate();
    message.classId = object.classId ?? "";
    message.nftId = object.nftId ?? "";
    message.agentId = object.agentId ?? 0;
    message.price = object.price?.map((e) => Coin.fromPartial(e)) || [];
    message.expiration = object.expiration ?? undefined;
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgUpdateResponse(): MsgUpdateResponse {
  return {};
}

export const MsgUpdateResponse = {
  encode(_: MsgUpdateResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateResponse {
    return {};
  },

  toJSON(_: MsgUpdateResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateResponse>, I>>(base?: I): MsgUpdateResponse {
    return MsgUpdateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateResponse>, I>>(_: I): MsgUpdateResponse {
    const message = createBaseMsgUpdateResponse();
    return message;
  },
};

function createBaseMsgBuy(): MsgBuy {
  return { classId: "", nftId: "", sender: "" };
}

export const MsgBuy = {
  encode(message: MsgBuy, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.classId !== "") {
      writer.uint32(10).string(message.classId);
    }
    if (message.nftId !== "") {
      writer.uint32(18).string(message.nftId);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgBuy {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBuy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.classId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nftId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgBuy {
    return {
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      nftId: isSet(object.nftId) ? globalThis.String(object.nftId) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgBuy): unknown {
    const obj: any = {};
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.nftId !== "") {
      obj.nftId = message.nftId;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgBuy>, I>>(base?: I): MsgBuy {
    return MsgBuy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgBuy>, I>>(object: I): MsgBuy {
    const message = createBaseMsgBuy();
    message.classId = object.classId ?? "";
    message.nftId = object.nftId ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgBuyResponse(): MsgBuyResponse {
  return {};
}

export const MsgBuyResponse = {
  encode(_: MsgBuyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgBuyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBuyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgBuyResponse {
    return {};
  },

  toJSON(_: MsgBuyResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgBuyResponse>, I>>(base?: I): MsgBuyResponse {
    return MsgBuyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgBuyResponse>, I>>(_: I): MsgBuyResponse {
    const message = createBaseMsgBuyResponse();
    return message;
  },
};

function createBaseMsgSetBid(): MsgSetBid {
  return { classId: "", nftId: "", price: [], expiration: undefined, sender: "" };
}

export const MsgSetBid = {
  encode(message: MsgSetBid, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.classId !== "") {
      writer.uint32(10).string(message.classId);
    }
    if (message.nftId !== "") {
      writer.uint32(18).string(message.nftId);
    }
    for (const v of message.price) {
      Coin.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.expiration !== undefined) {
      Timestamp.encode(toTimestamp(message.expiration), writer.uint32(34).fork()).ldelim();
    }
    if (message.sender !== "") {
      writer.uint32(42).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetBid {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetBid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.classId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nftId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.price.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.expiration = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSetBid {
    return {
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      nftId: isSet(object.nftId) ? globalThis.String(object.nftId) : "",
      price: globalThis.Array.isArray(object?.price) ? object.price.map((e: any) => Coin.fromJSON(e)) : [],
      expiration: isSet(object.expiration) ? fromJsonTimestamp(object.expiration) : undefined,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgSetBid): unknown {
    const obj: any = {};
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.nftId !== "") {
      obj.nftId = message.nftId;
    }
    if (message.price?.length) {
      obj.price = message.price.map((e) => Coin.toJSON(e));
    }
    if (message.expiration !== undefined) {
      obj.expiration = message.expiration.toISOString();
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetBid>, I>>(base?: I): MsgSetBid {
    return MsgSetBid.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetBid>, I>>(object: I): MsgSetBid {
    const message = createBaseMsgSetBid();
    message.classId = object.classId ?? "";
    message.nftId = object.nftId ?? "";
    message.price = object.price?.map((e) => Coin.fromPartial(e)) || [];
    message.expiration = object.expiration ?? undefined;
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgSetBidResponse(): MsgSetBidResponse {
  return {};
}

export const MsgSetBidResponse = {
  encode(_: MsgSetBidResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetBidResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetBidResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSetBidResponse {
    return {};
  },

  toJSON(_: MsgSetBidResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetBidResponse>, I>>(base?: I): MsgSetBidResponse {
    return MsgSetBidResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetBidResponse>, I>>(_: I): MsgSetBidResponse {
    const message = createBaseMsgSetBidResponse();
    return message;
  },
};

function createBaseMsgCancelBid(): MsgCancelBid {
  return { classId: "", nftId: "", sender: "" };
}

export const MsgCancelBid = {
  encode(message: MsgCancelBid, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.classId !== "") {
      writer.uint32(10).string(message.classId);
    }
    if (message.nftId !== "") {
      writer.uint32(18).string(message.nftId);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCancelBid {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCancelBid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.classId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nftId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCancelBid {
    return {
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      nftId: isSet(object.nftId) ? globalThis.String(object.nftId) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgCancelBid): unknown {
    const obj: any = {};
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.nftId !== "") {
      obj.nftId = message.nftId;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCancelBid>, I>>(base?: I): MsgCancelBid {
    return MsgCancelBid.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCancelBid>, I>>(object: I): MsgCancelBid {
    const message = createBaseMsgCancelBid();
    message.classId = object.classId ?? "";
    message.nftId = object.nftId ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgCancelBidResponse(): MsgCancelBidResponse {
  return {};
}

export const MsgCancelBidResponse = {
  encode(_: MsgCancelBidResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCancelBidResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCancelBidResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCancelBidResponse {
    return {};
  },

  toJSON(_: MsgCancelBidResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCancelBidResponse>, I>>(base?: I): MsgCancelBidResponse {
    return MsgCancelBidResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCancelBidResponse>, I>>(_: I): MsgCancelBidResponse {
    const message = createBaseMsgCancelBidResponse();
    return message;
  },
};

function createBaseMsgAcceptBid(): MsgAcceptBid {
  return { classId: "", nftId: "", sender: "", bidder: "" };
}

export const MsgAcceptBid = {
  encode(message: MsgAcceptBid, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.classId !== "") {
      writer.uint32(10).string(message.classId);
    }
    if (message.nftId !== "") {
      writer.uint32(18).string(message.nftId);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    if (message.bidder !== "") {
      writer.uint32(34).string(message.bidder);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAcceptBid {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAcceptBid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.classId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nftId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.bidder = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAcceptBid {
    return {
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      nftId: isSet(object.nftId) ? globalThis.String(object.nftId) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      bidder: isSet(object.bidder) ? globalThis.String(object.bidder) : "",
    };
  },

  toJSON(message: MsgAcceptBid): unknown {
    const obj: any = {};
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.nftId !== "") {
      obj.nftId = message.nftId;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.bidder !== "") {
      obj.bidder = message.bidder;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAcceptBid>, I>>(base?: I): MsgAcceptBid {
    return MsgAcceptBid.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAcceptBid>, I>>(object: I): MsgAcceptBid {
    const message = createBaseMsgAcceptBid();
    message.classId = object.classId ?? "";
    message.nftId = object.nftId ?? "";
    message.sender = object.sender ?? "";
    message.bidder = object.bidder ?? "";
    return message;
  },
};

function createBaseMsgAcceptBidResponse(): MsgAcceptBidResponse {
  return {};
}

export const MsgAcceptBidResponse = {
  encode(_: MsgAcceptBidResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAcceptBidResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAcceptBidResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAcceptBidResponse {
    return {};
  },

  toJSON(_: MsgAcceptBidResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAcceptBidResponse>, I>>(base?: I): MsgAcceptBidResponse {
    return MsgAcceptBidResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAcceptBidResponse>, I>>(_: I): MsgAcceptBidResponse {
    const message = createBaseMsgAcceptBidResponse();
    return message;
  },
};

function createBaseMsgRejectBid(): MsgRejectBid {
  return { classId: "", nftId: "", bidder: "", sender: "" };
}

export const MsgRejectBid = {
  encode(message: MsgRejectBid, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.classId !== "") {
      writer.uint32(10).string(message.classId);
    }
    if (message.nftId !== "") {
      writer.uint32(18).string(message.nftId);
    }
    if (message.bidder !== "") {
      writer.uint32(26).string(message.bidder);
    }
    if (message.sender !== "") {
      writer.uint32(34).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRejectBid {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRejectBid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.classId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nftId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.bidder = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRejectBid {
    return {
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      nftId: isSet(object.nftId) ? globalThis.String(object.nftId) : "",
      bidder: isSet(object.bidder) ? globalThis.String(object.bidder) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgRejectBid): unknown {
    const obj: any = {};
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.nftId !== "") {
      obj.nftId = message.nftId;
    }
    if (message.bidder !== "") {
      obj.bidder = message.bidder;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRejectBid>, I>>(base?: I): MsgRejectBid {
    return MsgRejectBid.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRejectBid>, I>>(object: I): MsgRejectBid {
    const message = createBaseMsgRejectBid();
    message.classId = object.classId ?? "";
    message.nftId = object.nftId ?? "";
    message.bidder = object.bidder ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgRejectBidResponse(): MsgRejectBidResponse {
  return {};
}

export const MsgRejectBidResponse = {
  encode(_: MsgRejectBidResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRejectBidResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRejectBidResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRejectBidResponse {
    return {};
  },

  toJSON(_: MsgRejectBidResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRejectBidResponse>, I>>(base?: I): MsgRejectBidResponse {
    return MsgRejectBidResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRejectBidResponse>, I>>(_: I): MsgRejectBidResponse {
    const message = createBaseMsgRejectBidResponse();
    return message;
  },
};

/** Msg defines the Marketplace Msg service. */
export interface Msg {
  /** List defines a method to list given NFT on marketplace */
  List(request: MsgList): Promise<MsgListResponse>;
  /** Delist defines a method to remove given NFT from the marketplace */
  Delist(request: MsgDelist): Promise<MsgDelistResponse>;
  /** Update defines a method to update given NFT details on the marketplace */
  Update(request: MsgUpdate): Promise<MsgUpdateResponse>;
  /** Buy defines a method that allows a user to purchase a given NFT from a marketplace. */
  Buy(request: MsgBuy): Promise<MsgBuyResponse>;
  /** SetBid defines a method that allows a user to place a NFT bid */
  SetBid(request: MsgSetBid): Promise<MsgSetBidResponse>;
  /** SetBid defines a method that allows a user to cancel a bid */
  CancelBid(request: MsgCancelBid): Promise<MsgCancelBidResponse>;
  /** AcceptBid defines a method that allows user to accept given bid */
  AcceptBid(request: MsgAcceptBid): Promise<MsgAcceptBidResponse>;
  /** RejectBid defines a method that allows user to rejct given bid */
  RejectBid(request: MsgRejectBid): Promise<MsgRejectBidResponse>;
}

export const MsgServiceName = "arka.marketplace.v1beta1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.List = this.List.bind(this);
    this.Delist = this.Delist.bind(this);
    this.Update = this.Update.bind(this);
    this.Buy = this.Buy.bind(this);
    this.SetBid = this.SetBid.bind(this);
    this.CancelBid = this.CancelBid.bind(this);
    this.AcceptBid = this.AcceptBid.bind(this);
    this.RejectBid = this.RejectBid.bind(this);
  }
  List(request: MsgList): Promise<MsgListResponse> {
    const data = MsgList.encode(request).finish();
    const promise = this.rpc.request(this.service, "List", data);
    return promise.then((data) => MsgListResponse.decode(_m0.Reader.create(data)));
  }

  Delist(request: MsgDelist): Promise<MsgDelistResponse> {
    const data = MsgDelist.encode(request).finish();
    const promise = this.rpc.request(this.service, "Delist", data);
    return promise.then((data) => MsgDelistResponse.decode(_m0.Reader.create(data)));
  }

  Update(request: MsgUpdate): Promise<MsgUpdateResponse> {
    const data = MsgUpdate.encode(request).finish();
    const promise = this.rpc.request(this.service, "Update", data);
    return promise.then((data) => MsgUpdateResponse.decode(_m0.Reader.create(data)));
  }

  Buy(request: MsgBuy): Promise<MsgBuyResponse> {
    const data = MsgBuy.encode(request).finish();
    const promise = this.rpc.request(this.service, "Buy", data);
    return promise.then((data) => MsgBuyResponse.decode(_m0.Reader.create(data)));
  }

  SetBid(request: MsgSetBid): Promise<MsgSetBidResponse> {
    const data = MsgSetBid.encode(request).finish();
    const promise = this.rpc.request(this.service, "SetBid", data);
    return promise.then((data) => MsgSetBidResponse.decode(_m0.Reader.create(data)));
  }

  CancelBid(request: MsgCancelBid): Promise<MsgCancelBidResponse> {
    const data = MsgCancelBid.encode(request).finish();
    const promise = this.rpc.request(this.service, "CancelBid", data);
    return promise.then((data) => MsgCancelBidResponse.decode(_m0.Reader.create(data)));
  }

  AcceptBid(request: MsgAcceptBid): Promise<MsgAcceptBidResponse> {
    const data = MsgAcceptBid.encode(request).finish();
    const promise = this.rpc.request(this.service, "AcceptBid", data);
    return promise.then((data) => MsgAcceptBidResponse.decode(_m0.Reader.create(data)));
  }

  RejectBid(request: MsgRejectBid): Promise<MsgRejectBidResponse> {
    const data = MsgRejectBid.encode(request).finish();
    const promise = this.rpc.request(this.service, "RejectBid", data);
    return promise.then((data) => MsgRejectBidResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
