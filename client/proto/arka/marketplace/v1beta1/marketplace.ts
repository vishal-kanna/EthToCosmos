// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: arka/marketplace/v1beta1/marketplace.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "arka.marketplace.v1beta1";

/** Bid defines */
export interface Bid {
  classId: string;
  nftId: string;
  bidder: string;
  price: Coin[];
  onSale: boolean;
  expiration: Date | undefined;
}

/** List defines */
export interface List {
  /** class_id is the unique id of the nft class */
  classId: string;
  /** nft_id is the unique id of the nft */
  nftId: string;
  agentId: number;
  /** seller is the account address of the seller */
  seller: string;
  price: Coin[];
  /**  */
  expiration: Date | undefined;
}

/** BidQueueItem defines */
export interface BidQueueItem {
  queueItems: BidQueueItem_QueueBidItem[];
}

/** QueueBidItem defines */
export interface BidQueueItem_QueueBidItem {
  classId: string;
  nftId: string;
}

function createBaseBid(): Bid {
  return { classId: "", nftId: "", bidder: "", price: [], onSale: false, expiration: undefined };
}

export const Bid = {
  encode(message: Bid, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.classId !== "") {
      writer.uint32(10).string(message.classId);
    }
    if (message.nftId !== "") {
      writer.uint32(18).string(message.nftId);
    }
    if (message.bidder !== "") {
      writer.uint32(26).string(message.bidder);
    }
    for (const v of message.price) {
      Coin.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    if (message.onSale !== false) {
      writer.uint32(40).bool(message.onSale);
    }
    if (message.expiration !== undefined) {
      Timestamp.encode(toTimestamp(message.expiration), writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Bid {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.classId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nftId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.bidder = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.price.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.onSale = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.expiration = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Bid {
    return {
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      nftId: isSet(object.nftId) ? globalThis.String(object.nftId) : "",
      bidder: isSet(object.bidder) ? globalThis.String(object.bidder) : "",
      price: globalThis.Array.isArray(object?.price) ? object.price.map((e: any) => Coin.fromJSON(e)) : [],
      onSale: isSet(object.onSale) ? globalThis.Boolean(object.onSale) : false,
      expiration: isSet(object.expiration) ? fromJsonTimestamp(object.expiration) : undefined,
    };
  },

  toJSON(message: Bid): unknown {
    const obj: any = {};
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.nftId !== "") {
      obj.nftId = message.nftId;
    }
    if (message.bidder !== "") {
      obj.bidder = message.bidder;
    }
    if (message.price?.length) {
      obj.price = message.price.map((e) => Coin.toJSON(e));
    }
    if (message.onSale !== false) {
      obj.onSale = message.onSale;
    }
    if (message.expiration !== undefined) {
      obj.expiration = message.expiration.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Bid>, I>>(base?: I): Bid {
    return Bid.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Bid>, I>>(object: I): Bid {
    const message = createBaseBid();
    message.classId = object.classId ?? "";
    message.nftId = object.nftId ?? "";
    message.bidder = object.bidder ?? "";
    message.price = object.price?.map((e) => Coin.fromPartial(e)) || [];
    message.onSale = object.onSale ?? false;
    message.expiration = object.expiration ?? undefined;
    return message;
  },
};

function createBaseList(): List {
  return { classId: "", nftId: "", agentId: 0, seller: "", price: [], expiration: undefined };
}

export const List = {
  encode(message: List, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.classId !== "") {
      writer.uint32(10).string(message.classId);
    }
    if (message.nftId !== "") {
      writer.uint32(18).string(message.nftId);
    }
    if (message.agentId !== 0) {
      writer.uint32(24).uint64(message.agentId);
    }
    if (message.seller !== "") {
      writer.uint32(34).string(message.seller);
    }
    for (const v of message.price) {
      Coin.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    if (message.expiration !== undefined) {
      Timestamp.encode(toTimestamp(message.expiration), writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): List {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.classId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nftId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.agentId = longToNumber(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.seller = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.price.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.expiration = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): List {
    return {
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      nftId: isSet(object.nftId) ? globalThis.String(object.nftId) : "",
      agentId: isSet(object.agentId) ? globalThis.Number(object.agentId) : 0,
      seller: isSet(object.seller) ? globalThis.String(object.seller) : "",
      price: globalThis.Array.isArray(object?.price) ? object.price.map((e: any) => Coin.fromJSON(e)) : [],
      expiration: isSet(object.expiration) ? fromJsonTimestamp(object.expiration) : undefined,
    };
  },

  toJSON(message: List): unknown {
    const obj: any = {};
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.nftId !== "") {
      obj.nftId = message.nftId;
    }
    if (message.agentId !== 0) {
      obj.agentId = Math.round(message.agentId);
    }
    if (message.seller !== "") {
      obj.seller = message.seller;
    }
    if (message.price?.length) {
      obj.price = message.price.map((e) => Coin.toJSON(e));
    }
    if (message.expiration !== undefined) {
      obj.expiration = message.expiration.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<List>, I>>(base?: I): List {
    return List.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<List>, I>>(object: I): List {
    const message = createBaseList();
    message.classId = object.classId ?? "";
    message.nftId = object.nftId ?? "";
    message.agentId = object.agentId ?? 0;
    message.seller = object.seller ?? "";
    message.price = object.price?.map((e) => Coin.fromPartial(e)) || [];
    message.expiration = object.expiration ?? undefined;
    return message;
  },
};

function createBaseBidQueueItem(): BidQueueItem {
  return { queueItems: [] };
}

export const BidQueueItem = {
  encode(message: BidQueueItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.queueItems) {
      BidQueueItem_QueueBidItem.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BidQueueItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBidQueueItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.queueItems.push(BidQueueItem_QueueBidItem.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BidQueueItem {
    return {
      queueItems: globalThis.Array.isArray(object?.queueItems)
        ? object.queueItems.map((e: any) => BidQueueItem_QueueBidItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BidQueueItem): unknown {
    const obj: any = {};
    if (message.queueItems?.length) {
      obj.queueItems = message.queueItems.map((e) => BidQueueItem_QueueBidItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BidQueueItem>, I>>(base?: I): BidQueueItem {
    return BidQueueItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BidQueueItem>, I>>(object: I): BidQueueItem {
    const message = createBaseBidQueueItem();
    message.queueItems = object.queueItems?.map((e) => BidQueueItem_QueueBidItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBidQueueItem_QueueBidItem(): BidQueueItem_QueueBidItem {
  return { classId: "", nftId: "" };
}

export const BidQueueItem_QueueBidItem = {
  encode(message: BidQueueItem_QueueBidItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.classId !== "") {
      writer.uint32(10).string(message.classId);
    }
    if (message.nftId !== "") {
      writer.uint32(18).string(message.nftId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BidQueueItem_QueueBidItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBidQueueItem_QueueBidItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.classId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nftId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BidQueueItem_QueueBidItem {
    return {
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      nftId: isSet(object.nftId) ? globalThis.String(object.nftId) : "",
    };
  },

  toJSON(message: BidQueueItem_QueueBidItem): unknown {
    const obj: any = {};
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.nftId !== "") {
      obj.nftId = message.nftId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BidQueueItem_QueueBidItem>, I>>(base?: I): BidQueueItem_QueueBidItem {
    return BidQueueItem_QueueBidItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BidQueueItem_QueueBidItem>, I>>(object: I): BidQueueItem_QueueBidItem {
    const message = createBaseBidQueueItem_QueueBidItem();
    message.classId = object.classId ?? "";
    message.nftId = object.nftId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
