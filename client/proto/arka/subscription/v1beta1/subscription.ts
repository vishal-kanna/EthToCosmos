// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: arka/subscription/v1beta1/subscription.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "arka.subscription.v1beta1";

/** PlanStatus defines status of plan */
export enum PlanStatus {
  PLAN_STATUS_UNSPECIFIED = 0,
  PLAN_STATUS_ACTIVE = 1,
  PLAN_STATUS_INACTIVE = 2,
  PLAN_STATUS_PENDING = 3,
  UNRECOGNIZED = -1,
}

export function planStatusFromJSON(object: any): PlanStatus {
  switch (object) {
    case 0:
    case "PLAN_STATUS_UNSPECIFIED":
      return PlanStatus.PLAN_STATUS_UNSPECIFIED;
    case 1:
    case "PLAN_STATUS_ACTIVE":
      return PlanStatus.PLAN_STATUS_ACTIVE;
    case 2:
    case "PLAN_STATUS_INACTIVE":
      return PlanStatus.PLAN_STATUS_INACTIVE;
    case 3:
    case "PLAN_STATUS_PENDING":
      return PlanStatus.PLAN_STATUS_PENDING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlanStatus.UNRECOGNIZED;
  }
}

export function planStatusToJSON(object: PlanStatus): string {
  switch (object) {
    case PlanStatus.PLAN_STATUS_UNSPECIFIED:
      return "PLAN_STATUS_UNSPECIFIED";
    case PlanStatus.PLAN_STATUS_ACTIVE:
      return "PLAN_STATUS_ACTIVE";
    case PlanStatus.PLAN_STATUS_INACTIVE:
      return "PLAN_STATUS_INACTIVE";
    case PlanStatus.PLAN_STATUS_PENDING:
      return "PLAN_STATUS_PENDING";
    case PlanStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** PlanPurchaseStatus defines status of PlanPurchase */
export enum PlanPurchaseStatus {
  PLAN_PURCHASE_STATUS_UNSPECIFIED = 0,
  PLAN_PURCHASE_STATUS_ACTIVE = 1,
  PLAN_PURCHASE_STATUS_INACTIVE = 2,
  PLAN_PURCHASE_STATUS_PENDING = 3,
  UNRECOGNIZED = -1,
}

export function planPurchaseStatusFromJSON(object: any): PlanPurchaseStatus {
  switch (object) {
    case 0:
    case "PLAN_PURCHASE_STATUS_UNSPECIFIED":
      return PlanPurchaseStatus.PLAN_PURCHASE_STATUS_UNSPECIFIED;
    case 1:
    case "PLAN_PURCHASE_STATUS_ACTIVE":
      return PlanPurchaseStatus.PLAN_PURCHASE_STATUS_ACTIVE;
    case 2:
    case "PLAN_PURCHASE_STATUS_INACTIVE":
      return PlanPurchaseStatus.PLAN_PURCHASE_STATUS_INACTIVE;
    case 3:
    case "PLAN_PURCHASE_STATUS_PENDING":
      return PlanPurchaseStatus.PLAN_PURCHASE_STATUS_PENDING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlanPurchaseStatus.UNRECOGNIZED;
  }
}

export function planPurchaseStatusToJSON(object: PlanPurchaseStatus): string {
  switch (object) {
    case PlanPurchaseStatus.PLAN_PURCHASE_STATUS_UNSPECIFIED:
      return "PLAN_PURCHASE_STATUS_UNSPECIFIED";
    case PlanPurchaseStatus.PLAN_PURCHASE_STATUS_ACTIVE:
      return "PLAN_PURCHASE_STATUS_ACTIVE";
    case PlanPurchaseStatus.PLAN_PURCHASE_STATUS_INACTIVE:
      return "PLAN_PURCHASE_STATUS_INACTIVE";
    case PlanPurchaseStatus.PLAN_PURCHASE_STATUS_PENDING:
      return "PLAN_PURCHASE_STATUS_PENDING";
    case PlanPurchaseStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Plan holds details of purchase plan */
export interface Plan {
  id: number;
  price: Coin[];
  duration: number;
  deploymentId: number;
  name: string;
  description: string;
  status: PlanStatus;
  creator: string;
  api: string;
}

/** PlanPurchase holds the details of purchased plan */
export interface PlanPurchase {
  planId: number;
  expiration: Date | undefined;
  planOwner: string;
  buyer: string;
  price: Coin[];
  duration: number;
}

/** Nonce holds information about purchased plan's access details */
export interface Nonce {
  planId: number;
  owner: string;
  expiration: Date | undefined;
  user: string;
}

/** EscrowBalance holds information about purchased plan's escrow balance of the user */
export interface EscrowBalance {
  planId: number;
  address: string;
  amount: Coin[];
}

function createBasePlan(): Plan {
  return { id: 0, price: [], duration: 0, deploymentId: 0, name: "", description: "", status: 0, creator: "", api: "" };
}

export const Plan = {
  encode(message: Plan, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    for (const v of message.price) {
      Coin.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    if (message.duration !== 0) {
      writer.uint32(24).uint64(message.duration);
    }
    if (message.deploymentId !== 0) {
      writer.uint32(32).uint64(message.deploymentId);
    }
    if (message.name !== "") {
      writer.uint32(42).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    if (message.status !== 0) {
      writer.uint32(56).int32(message.status);
    }
    if (message.creator !== "") {
      writer.uint32(66).string(message.creator);
    }
    if (message.api !== "") {
      writer.uint32(74).string(message.api);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Plan {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.price.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.duration = longToNumber(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.deploymentId = longToNumber(reader.uint64() as Long);
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.api = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Plan {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      price: globalThis.Array.isArray(object?.price) ? object.price.map((e: any) => Coin.fromJSON(e)) : [],
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
      deploymentId: isSet(object.deploymentId) ? globalThis.Number(object.deploymentId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      status: isSet(object.status) ? planStatusFromJSON(object.status) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      api: isSet(object.api) ? globalThis.String(object.api) : "",
    };
  },

  toJSON(message: Plan): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.price?.length) {
      obj.price = message.price.map((e) => Coin.toJSON(e));
    }
    if (message.duration !== 0) {
      obj.duration = Math.round(message.duration);
    }
    if (message.deploymentId !== 0) {
      obj.deploymentId = Math.round(message.deploymentId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.status !== 0) {
      obj.status = planStatusToJSON(message.status);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.api !== "") {
      obj.api = message.api;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Plan>, I>>(base?: I): Plan {
    return Plan.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Plan>, I>>(object: I): Plan {
    const message = createBasePlan();
    message.id = object.id ?? 0;
    message.price = object.price?.map((e) => Coin.fromPartial(e)) || [];
    message.duration = object.duration ?? 0;
    message.deploymentId = object.deploymentId ?? 0;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.status = object.status ?? 0;
    message.creator = object.creator ?? "";
    message.api = object.api ?? "";
    return message;
  },
};

function createBasePlanPurchase(): PlanPurchase {
  return { planId: 0, expiration: undefined, planOwner: "", buyer: "", price: [], duration: 0 };
}

export const PlanPurchase = {
  encode(message: PlanPurchase, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.planId !== 0) {
      writer.uint32(8).uint64(message.planId);
    }
    if (message.expiration !== undefined) {
      Timestamp.encode(toTimestamp(message.expiration), writer.uint32(18).fork()).ldelim();
    }
    if (message.planOwner !== "") {
      writer.uint32(26).string(message.planOwner);
    }
    if (message.buyer !== "") {
      writer.uint32(34).string(message.buyer);
    }
    for (const v of message.price) {
      Coin.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    if (message.duration !== 0) {
      writer.uint32(48).uint64(message.duration);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlanPurchase {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlanPurchase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.planId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.expiration = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.planOwner = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.buyer = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.price.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.duration = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlanPurchase {
    return {
      planId: isSet(object.planId) ? globalThis.Number(object.planId) : 0,
      expiration: isSet(object.expiration) ? fromJsonTimestamp(object.expiration) : undefined,
      planOwner: isSet(object.planOwner) ? globalThis.String(object.planOwner) : "",
      buyer: isSet(object.buyer) ? globalThis.String(object.buyer) : "",
      price: globalThis.Array.isArray(object?.price) ? object.price.map((e: any) => Coin.fromJSON(e)) : [],
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
    };
  },

  toJSON(message: PlanPurchase): unknown {
    const obj: any = {};
    if (message.planId !== 0) {
      obj.planId = Math.round(message.planId);
    }
    if (message.expiration !== undefined) {
      obj.expiration = message.expiration.toISOString();
    }
    if (message.planOwner !== "") {
      obj.planOwner = message.planOwner;
    }
    if (message.buyer !== "") {
      obj.buyer = message.buyer;
    }
    if (message.price?.length) {
      obj.price = message.price.map((e) => Coin.toJSON(e));
    }
    if (message.duration !== 0) {
      obj.duration = Math.round(message.duration);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlanPurchase>, I>>(base?: I): PlanPurchase {
    return PlanPurchase.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlanPurchase>, I>>(object: I): PlanPurchase {
    const message = createBasePlanPurchase();
    message.planId = object.planId ?? 0;
    message.expiration = object.expiration ?? undefined;
    message.planOwner = object.planOwner ?? "";
    message.buyer = object.buyer ?? "";
    message.price = object.price?.map((e) => Coin.fromPartial(e)) || [];
    message.duration = object.duration ?? 0;
    return message;
  },
};

function createBaseNonce(): Nonce {
  return { planId: 0, owner: "", expiration: undefined, user: "" };
}

export const Nonce = {
  encode(message: Nonce, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.planId !== 0) {
      writer.uint32(8).uint64(message.planId);
    }
    if (message.owner !== "") {
      writer.uint32(18).string(message.owner);
    }
    if (message.expiration !== undefined) {
      Timestamp.encode(toTimestamp(message.expiration), writer.uint32(26).fork()).ldelim();
    }
    if (message.user !== "") {
      writer.uint32(34).string(message.user);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Nonce {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNonce();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.planId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.expiration = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.user = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Nonce {
    return {
      planId: isSet(object.planId) ? globalThis.Number(object.planId) : 0,
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      expiration: isSet(object.expiration) ? fromJsonTimestamp(object.expiration) : undefined,
      user: isSet(object.user) ? globalThis.String(object.user) : "",
    };
  },

  toJSON(message: Nonce): unknown {
    const obj: any = {};
    if (message.planId !== 0) {
      obj.planId = Math.round(message.planId);
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.expiration !== undefined) {
      obj.expiration = message.expiration.toISOString();
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Nonce>, I>>(base?: I): Nonce {
    return Nonce.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Nonce>, I>>(object: I): Nonce {
    const message = createBaseNonce();
    message.planId = object.planId ?? 0;
    message.owner = object.owner ?? "";
    message.expiration = object.expiration ?? undefined;
    message.user = object.user ?? "";
    return message;
  },
};

function createBaseEscrowBalance(): EscrowBalance {
  return { planId: 0, address: "", amount: [] };
}

export const EscrowBalance = {
  encode(message: EscrowBalance, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.planId !== 0) {
      writer.uint32(8).uint64(message.planId);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EscrowBalance {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEscrowBalance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.planId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EscrowBalance {
    return {
      planId: isSet(object.planId) ? globalThis.Number(object.planId) : 0,
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      amount: globalThis.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: EscrowBalance): unknown {
    const obj: any = {};
    if (message.planId !== 0) {
      obj.planId = Math.round(message.planId);
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EscrowBalance>, I>>(base?: I): EscrowBalance {
    return EscrowBalance.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EscrowBalance>, I>>(object: I): EscrowBalance {
    const message = createBaseEscrowBalance();
    message.planId = object.planId ?? 0;
    message.address = object.address ?? "";
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
