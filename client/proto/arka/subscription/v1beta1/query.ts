// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: arka/subscription/v1beta1/query.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Nonce, Plan, PlanPurchase } from "./subscription";

export const protobufPackage = "arka.subscription.v1beta1";

/** QueryPlansRequest is the request type for the Query/Plan RPC method. */
export interface QueryPlansRequest {
  /** pagination defines an pagination for the request. */
  pagination: PageRequest | undefined;
}

/** QueryPlansResponse is the response type for the Query/Plan RPC method. */
export interface QueryPlansResponse {
  /** plans defines list of plans */
  plans: Plan[];
  /** pagination defines an pagination for the response. */
  pagination: PageResponse | undefined;
}

/** QueryPlanRequest is the request type for the Query/Plan RPC method. */
export interface QueryPlanRequest {
  /** id is the unique id of the plan */
  planId: number;
  /** creator is the plan creator */
  creator: string;
}

/** QueryPlanResponse is the response type for the Query/Plan RPC method. */
export interface QueryPlanResponse {
  /** plan holds plan details */
  plan: Plan | undefined;
}

/** QueryPurchasedPlansRequest is the request type for the Query/PurchasePlans RPC method. */
export interface QueryPurchasedPlansRequest {
  /** pagination defines an pagination for the request. */
  pagination: PageRequest | undefined;
}

/** QueryPurchasedPlansRequest is the response type for the Query/PurchasePlans RPC method. */
export interface QueryPurchasedPlansResponse {
  /** purchased_plans defines list of purchased plans */
  purchasedPlans: PlanPurchase[];
  /** pagination defines an pagination for the response. */
  pagination: PageResponse | undefined;
}

/** QueryPurchasedPlanRequest is the request type for the Query/PurchasePlanByID RPC method. */
export interface QueryPurchasedPlanRequest {
  /** id is the unique id of the plan */
  id: number;
  /** buyer is the unique address of plan buyer */
  buyer: string;
}

/** QueryPurchasedPlanResponse is the response type for the Query/PurchasePlanByID RPC method. */
export interface QueryPurchasedPlanResponse {
  /** purchased_plan holds purchased plan details */
  purchasedPlan: PlanPurchase | undefined;
}

/** QueryNonceRequest is the request type for the Query/Nonce RPC method. */
export interface QueryNonceRequest {
  /** id is the unique id of the plan */
  id: number;
  /** owner is the address of the user who bought the plan */
  owner: string;
}

/** QueryNonceResponse is the response type for the Query/Nonce RPC method. */
export interface QueryNonceResponse {
  /** nonce holds information about purchased plan */
  nonce: Nonce | undefined;
}

/** QueryNonceRequest is the request type for the Query/PlanByDeployment RPC method. */
export interface QueryPlanByDeploymentRequest {
  /** deployment_id is the unique id of the deployment */
  deploymentId: number;
}

/** QueryPlanByDeploymentResponse is the response type for the Query/PlanByDeployment RPC method. */
export interface QueryPlanByDeploymentResponse {
  /** plan holds information about purchased plan */
  plan: Plan | undefined;
}

function createBaseQueryPlansRequest(): QueryPlansRequest {
  return { pagination: undefined };
}

export const QueryPlansRequest = {
  encode(message: QueryPlansRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryPlansRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPlansRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPlansRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryPlansRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPlansRequest>, I>>(base?: I): QueryPlansRequest {
    return QueryPlansRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPlansRequest>, I>>(object: I): QueryPlansRequest {
    const message = createBaseQueryPlansRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryPlansResponse(): QueryPlansResponse {
  return { plans: [], pagination: undefined };
}

export const QueryPlansResponse = {
  encode(message: QueryPlansResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.plans) {
      Plan.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryPlansResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPlansResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.plans.push(Plan.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPlansResponse {
    return {
      plans: globalThis.Array.isArray(object?.plans) ? object.plans.map((e: any) => Plan.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryPlansResponse): unknown {
    const obj: any = {};
    if (message.plans?.length) {
      obj.plans = message.plans.map((e) => Plan.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPlansResponse>, I>>(base?: I): QueryPlansResponse {
    return QueryPlansResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPlansResponse>, I>>(object: I): QueryPlansResponse {
    const message = createBaseQueryPlansResponse();
    message.plans = object.plans?.map((e) => Plan.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryPlanRequest(): QueryPlanRequest {
  return { planId: 0, creator: "" };
}

export const QueryPlanRequest = {
  encode(message: QueryPlanRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.planId !== 0) {
      writer.uint32(8).uint64(message.planId);
    }
    if (message.creator !== "") {
      writer.uint32(18).string(message.creator);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryPlanRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPlanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.planId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.creator = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPlanRequest {
    return {
      planId: isSet(object.planId) ? globalThis.Number(object.planId) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: QueryPlanRequest): unknown {
    const obj: any = {};
    if (message.planId !== 0) {
      obj.planId = Math.round(message.planId);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPlanRequest>, I>>(base?: I): QueryPlanRequest {
    return QueryPlanRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPlanRequest>, I>>(object: I): QueryPlanRequest {
    const message = createBaseQueryPlanRequest();
    message.planId = object.planId ?? 0;
    message.creator = object.creator ?? "";
    return message;
  },
};

function createBaseQueryPlanResponse(): QueryPlanResponse {
  return { plan: undefined };
}

export const QueryPlanResponse = {
  encode(message: QueryPlanResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.plan !== undefined) {
      Plan.encode(message.plan, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryPlanResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPlanResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.plan = Plan.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPlanResponse {
    return { plan: isSet(object.plan) ? Plan.fromJSON(object.plan) : undefined };
  },

  toJSON(message: QueryPlanResponse): unknown {
    const obj: any = {};
    if (message.plan !== undefined) {
      obj.plan = Plan.toJSON(message.plan);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPlanResponse>, I>>(base?: I): QueryPlanResponse {
    return QueryPlanResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPlanResponse>, I>>(object: I): QueryPlanResponse {
    const message = createBaseQueryPlanResponse();
    message.plan = (object.plan !== undefined && object.plan !== null) ? Plan.fromPartial(object.plan) : undefined;
    return message;
  },
};

function createBaseQueryPurchasedPlansRequest(): QueryPurchasedPlansRequest {
  return { pagination: undefined };
}

export const QueryPurchasedPlansRequest = {
  encode(message: QueryPurchasedPlansRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryPurchasedPlansRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPurchasedPlansRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPurchasedPlansRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryPurchasedPlansRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPurchasedPlansRequest>, I>>(base?: I): QueryPurchasedPlansRequest {
    return QueryPurchasedPlansRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPurchasedPlansRequest>, I>>(object: I): QueryPurchasedPlansRequest {
    const message = createBaseQueryPurchasedPlansRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryPurchasedPlansResponse(): QueryPurchasedPlansResponse {
  return { purchasedPlans: [], pagination: undefined };
}

export const QueryPurchasedPlansResponse = {
  encode(message: QueryPurchasedPlansResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.purchasedPlans) {
      PlanPurchase.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryPurchasedPlansResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPurchasedPlansResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.purchasedPlans.push(PlanPurchase.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPurchasedPlansResponse {
    return {
      purchasedPlans: globalThis.Array.isArray(object?.purchasedPlans)
        ? object.purchasedPlans.map((e: any) => PlanPurchase.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryPurchasedPlansResponse): unknown {
    const obj: any = {};
    if (message.purchasedPlans?.length) {
      obj.purchasedPlans = message.purchasedPlans.map((e) => PlanPurchase.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPurchasedPlansResponse>, I>>(base?: I): QueryPurchasedPlansResponse {
    return QueryPurchasedPlansResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPurchasedPlansResponse>, I>>(object: I): QueryPurchasedPlansResponse {
    const message = createBaseQueryPurchasedPlansResponse();
    message.purchasedPlans = object.purchasedPlans?.map((e) => PlanPurchase.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryPurchasedPlanRequest(): QueryPurchasedPlanRequest {
  return { id: 0, buyer: "" };
}

export const QueryPurchasedPlanRequest = {
  encode(message: QueryPurchasedPlanRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.buyer !== "") {
      writer.uint32(18).string(message.buyer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryPurchasedPlanRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPurchasedPlanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.buyer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPurchasedPlanRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      buyer: isSet(object.buyer) ? globalThis.String(object.buyer) : "",
    };
  },

  toJSON(message: QueryPurchasedPlanRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.buyer !== "") {
      obj.buyer = message.buyer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPurchasedPlanRequest>, I>>(base?: I): QueryPurchasedPlanRequest {
    return QueryPurchasedPlanRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPurchasedPlanRequest>, I>>(object: I): QueryPurchasedPlanRequest {
    const message = createBaseQueryPurchasedPlanRequest();
    message.id = object.id ?? 0;
    message.buyer = object.buyer ?? "";
    return message;
  },
};

function createBaseQueryPurchasedPlanResponse(): QueryPurchasedPlanResponse {
  return { purchasedPlan: undefined };
}

export const QueryPurchasedPlanResponse = {
  encode(message: QueryPurchasedPlanResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.purchasedPlan !== undefined) {
      PlanPurchase.encode(message.purchasedPlan, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryPurchasedPlanResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPurchasedPlanResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.purchasedPlan = PlanPurchase.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPurchasedPlanResponse {
    return { purchasedPlan: isSet(object.purchasedPlan) ? PlanPurchase.fromJSON(object.purchasedPlan) : undefined };
  },

  toJSON(message: QueryPurchasedPlanResponse): unknown {
    const obj: any = {};
    if (message.purchasedPlan !== undefined) {
      obj.purchasedPlan = PlanPurchase.toJSON(message.purchasedPlan);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPurchasedPlanResponse>, I>>(base?: I): QueryPurchasedPlanResponse {
    return QueryPurchasedPlanResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPurchasedPlanResponse>, I>>(object: I): QueryPurchasedPlanResponse {
    const message = createBaseQueryPurchasedPlanResponse();
    message.purchasedPlan = (object.purchasedPlan !== undefined && object.purchasedPlan !== null)
      ? PlanPurchase.fromPartial(object.purchasedPlan)
      : undefined;
    return message;
  },
};

function createBaseQueryNonceRequest(): QueryNonceRequest {
  return { id: 0, owner: "" };
}

export const QueryNonceRequest = {
  encode(message: QueryNonceRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.owner !== "") {
      writer.uint32(18).string(message.owner);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryNonceRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNonceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryNonceRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
    };
  },

  toJSON(message: QueryNonceRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryNonceRequest>, I>>(base?: I): QueryNonceRequest {
    return QueryNonceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryNonceRequest>, I>>(object: I): QueryNonceRequest {
    const message = createBaseQueryNonceRequest();
    message.id = object.id ?? 0;
    message.owner = object.owner ?? "";
    return message;
  },
};

function createBaseQueryNonceResponse(): QueryNonceResponse {
  return { nonce: undefined };
}

export const QueryNonceResponse = {
  encode(message: QueryNonceResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.nonce !== undefined) {
      Nonce.encode(message.nonce, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryNonceResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNonceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nonce = Nonce.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryNonceResponse {
    return { nonce: isSet(object.nonce) ? Nonce.fromJSON(object.nonce) : undefined };
  },

  toJSON(message: QueryNonceResponse): unknown {
    const obj: any = {};
    if (message.nonce !== undefined) {
      obj.nonce = Nonce.toJSON(message.nonce);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryNonceResponse>, I>>(base?: I): QueryNonceResponse {
    return QueryNonceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryNonceResponse>, I>>(object: I): QueryNonceResponse {
    const message = createBaseQueryNonceResponse();
    message.nonce = (object.nonce !== undefined && object.nonce !== null) ? Nonce.fromPartial(object.nonce) : undefined;
    return message;
  },
};

function createBaseQueryPlanByDeploymentRequest(): QueryPlanByDeploymentRequest {
  return { deploymentId: 0 };
}

export const QueryPlanByDeploymentRequest = {
  encode(message: QueryPlanByDeploymentRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deploymentId !== 0) {
      writer.uint32(8).uint64(message.deploymentId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryPlanByDeploymentRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPlanByDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deploymentId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPlanByDeploymentRequest {
    return { deploymentId: isSet(object.deploymentId) ? globalThis.Number(object.deploymentId) : 0 };
  },

  toJSON(message: QueryPlanByDeploymentRequest): unknown {
    const obj: any = {};
    if (message.deploymentId !== 0) {
      obj.deploymentId = Math.round(message.deploymentId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPlanByDeploymentRequest>, I>>(base?: I): QueryPlanByDeploymentRequest {
    return QueryPlanByDeploymentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPlanByDeploymentRequest>, I>>(object: I): QueryPlanByDeploymentRequest {
    const message = createBaseQueryPlanByDeploymentRequest();
    message.deploymentId = object.deploymentId ?? 0;
    return message;
  },
};

function createBaseQueryPlanByDeploymentResponse(): QueryPlanByDeploymentResponse {
  return { plan: undefined };
}

export const QueryPlanByDeploymentResponse = {
  encode(message: QueryPlanByDeploymentResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.plan !== undefined) {
      Plan.encode(message.plan, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryPlanByDeploymentResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPlanByDeploymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.plan = Plan.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPlanByDeploymentResponse {
    return { plan: isSet(object.plan) ? Plan.fromJSON(object.plan) : undefined };
  },

  toJSON(message: QueryPlanByDeploymentResponse): unknown {
    const obj: any = {};
    if (message.plan !== undefined) {
      obj.plan = Plan.toJSON(message.plan);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPlanByDeploymentResponse>, I>>(base?: I): QueryPlanByDeploymentResponse {
    return QueryPlanByDeploymentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPlanByDeploymentResponse>, I>>(
    object: I,
  ): QueryPlanByDeploymentResponse {
    const message = createBaseQueryPlanByDeploymentResponse();
    message.plan = (object.plan !== undefined && object.plan !== null) ? Plan.fromPartial(object.plan) : undefined;
    return message;
  },
};

/** GenesisState defines the deployment module's queries. */
export interface Query {
  /** Returns list of plans. */
  Plans(request: QueryPlansRequest): Promise<QueryPlansResponse>;
  /** Returns purchased plan details of given ID. */
  PurchasedPlan(request: QueryPurchasedPlanRequest): Promise<QueryPurchasedPlanResponse>;
  /** Returns list of purchased plans. */
  PurchasedPlans(request: QueryPurchasedPlansRequest): Promise<QueryPurchasedPlansResponse>;
  /** Returns plan details of given ID. */
  Plan(request: QueryPlanRequest): Promise<QueryPlanResponse>;
  /** Returns nonce details of given ID. */
  Nonce(request: QueryNonceRequest): Promise<QueryNonceResponse>;
  /** Returns plan details of a given deployment id. */
  PlanByDeployment(request: QueryPlanByDeploymentRequest): Promise<QueryPlanByDeploymentResponse>;
}

export const QueryServiceName = "arka.subscription.v1beta1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Plans = this.Plans.bind(this);
    this.PurchasedPlan = this.PurchasedPlan.bind(this);
    this.PurchasedPlans = this.PurchasedPlans.bind(this);
    this.Plan = this.Plan.bind(this);
    this.Nonce = this.Nonce.bind(this);
    this.PlanByDeployment = this.PlanByDeployment.bind(this);
  }
  Plans(request: QueryPlansRequest): Promise<QueryPlansResponse> {
    const data = QueryPlansRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Plans", data);
    return promise.then((data) => QueryPlansResponse.decode(_m0.Reader.create(data)));
  }

  PurchasedPlan(request: QueryPurchasedPlanRequest): Promise<QueryPurchasedPlanResponse> {
    const data = QueryPurchasedPlanRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PurchasedPlan", data);
    return promise.then((data) => QueryPurchasedPlanResponse.decode(_m0.Reader.create(data)));
  }

  PurchasedPlans(request: QueryPurchasedPlansRequest): Promise<QueryPurchasedPlansResponse> {
    const data = QueryPurchasedPlansRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PurchasedPlans", data);
    return promise.then((data) => QueryPurchasedPlansResponse.decode(_m0.Reader.create(data)));
  }

  Plan(request: QueryPlanRequest): Promise<QueryPlanResponse> {
    const data = QueryPlanRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Plan", data);
    return promise.then((data) => QueryPlanResponse.decode(_m0.Reader.create(data)));
  }

  Nonce(request: QueryNonceRequest): Promise<QueryNonceResponse> {
    const data = QueryNonceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Nonce", data);
    return promise.then((data) => QueryNonceResponse.decode(_m0.Reader.create(data)));
  }

  PlanByDeployment(request: QueryPlanByDeploymentRequest): Promise<QueryPlanByDeploymentResponse> {
    const data = QueryPlanByDeploymentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PlanByDeployment", data);
    return promise.then((data) => QueryPlanByDeploymentResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
