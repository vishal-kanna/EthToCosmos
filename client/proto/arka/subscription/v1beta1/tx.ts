// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: arka/subscription/v1beta1/tx.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "arka.subscription.v1beta1";

/** MsgCreatePlan defines the Msg/CreatePlan request type. */
export interface MsgCreatePlan {
  deploymentId: number;
  duration: number;
  sender: string;
  price: Coin[];
  name: string;
  description: string;
  api: string;
}

/** MsgCreatePlanResponse defines the Msg/CreatePlan response type. */
export interface MsgCreatePlanResponse {
}

/** MsgBuyPlan defines the Msg/BuyPlan request type.BuyPlan */
export interface MsgBuyPlan {
  planId: number;
  metadata: Uint8Array;
  creator: string;
  sender: string;
}

/** MsgBuyPlanResponse defines the Msg/BuyPlan response type. */
export interface MsgBuyPlanResponse {
}

/** MsgCancelPlan defines the Msg/CancelPlan request type.MsgCancelPlan */
export interface MsgCancelPlan {
  planId: number;
  sender: string;
}

/** MsgCancelPlanResponse defines the Msg/CancelPlan response type. */
export interface MsgCancelPlanResponse {
}

/** MsgCreateNonce defines the Msg/CreateNonce request type.CreateNonce */
export interface MsgCreateNonce {
  planId: number;
  sender: string;
  expiration:
    | Date
    | undefined;
  /** user is the account address of the user who has access for this subscription */
  user: string;
}

/** MsgCreateNonceResponse defines the Msg/CreateNonce response type. */
export interface MsgCreateNonceResponse {
}

/** MsgFundAccount defines the Msg/FundAccount request type */
export interface MsgFundAccount {
  planId: number;
  sender: string;
  amount: Coin[];
}

/** MsgFundAccountResponse defines the Msg/FundAccount request type */
export interface MsgFundAccountResponse {
}

function createBaseMsgCreatePlan(): MsgCreatePlan {
  return { deploymentId: 0, duration: 0, sender: "", price: [], name: "", description: "", api: "" };
}

export const MsgCreatePlan = {
  encode(message: MsgCreatePlan, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deploymentId !== 0) {
      writer.uint32(8).uint64(message.deploymentId);
    }
    if (message.duration !== 0) {
      writer.uint32(16).uint64(message.duration);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    for (const v of message.price) {
      Coin.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    if (message.name !== "") {
      writer.uint32(42).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    if (message.api !== "") {
      writer.uint32(58).string(message.api);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreatePlan {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreatePlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.deploymentId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.duration = longToNumber(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.price.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.api = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreatePlan {
    return {
      deploymentId: isSet(object.deploymentId) ? globalThis.Number(object.deploymentId) : 0,
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      price: globalThis.Array.isArray(object?.price) ? object.price.map((e: any) => Coin.fromJSON(e)) : [],
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      api: isSet(object.api) ? globalThis.String(object.api) : "",
    };
  },

  toJSON(message: MsgCreatePlan): unknown {
    const obj: any = {};
    if (message.deploymentId !== 0) {
      obj.deploymentId = Math.round(message.deploymentId);
    }
    if (message.duration !== 0) {
      obj.duration = Math.round(message.duration);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.price?.length) {
      obj.price = message.price.map((e) => Coin.toJSON(e));
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.api !== "") {
      obj.api = message.api;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreatePlan>, I>>(base?: I): MsgCreatePlan {
    return MsgCreatePlan.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreatePlan>, I>>(object: I): MsgCreatePlan {
    const message = createBaseMsgCreatePlan();
    message.deploymentId = object.deploymentId ?? 0;
    message.duration = object.duration ?? 0;
    message.sender = object.sender ?? "";
    message.price = object.price?.map((e) => Coin.fromPartial(e)) || [];
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.api = object.api ?? "";
    return message;
  },
};

function createBaseMsgCreatePlanResponse(): MsgCreatePlanResponse {
  return {};
}

export const MsgCreatePlanResponse = {
  encode(_: MsgCreatePlanResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreatePlanResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreatePlanResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreatePlanResponse {
    return {};
  },

  toJSON(_: MsgCreatePlanResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreatePlanResponse>, I>>(base?: I): MsgCreatePlanResponse {
    return MsgCreatePlanResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreatePlanResponse>, I>>(_: I): MsgCreatePlanResponse {
    const message = createBaseMsgCreatePlanResponse();
    return message;
  },
};

function createBaseMsgBuyPlan(): MsgBuyPlan {
  return { planId: 0, metadata: new Uint8Array(0), creator: "", sender: "" };
}

export const MsgBuyPlan = {
  encode(message: MsgBuyPlan, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.planId !== 0) {
      writer.uint32(8).uint64(message.planId);
    }
    if (message.metadata.length !== 0) {
      writer.uint32(18).bytes(message.metadata);
    }
    if (message.creator !== "") {
      writer.uint32(26).string(message.creator);
    }
    if (message.sender !== "") {
      writer.uint32(34).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgBuyPlan {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBuyPlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.planId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadata = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgBuyPlan {
    return {
      planId: isSet(object.planId) ? globalThis.Number(object.planId) : 0,
      metadata: isSet(object.metadata) ? bytesFromBase64(object.metadata) : new Uint8Array(0),
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgBuyPlan): unknown {
    const obj: any = {};
    if (message.planId !== 0) {
      obj.planId = Math.round(message.planId);
    }
    if (message.metadata.length !== 0) {
      obj.metadata = base64FromBytes(message.metadata);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgBuyPlan>, I>>(base?: I): MsgBuyPlan {
    return MsgBuyPlan.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgBuyPlan>, I>>(object: I): MsgBuyPlan {
    const message = createBaseMsgBuyPlan();
    message.planId = object.planId ?? 0;
    message.metadata = object.metadata ?? new Uint8Array(0);
    message.creator = object.creator ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgBuyPlanResponse(): MsgBuyPlanResponse {
  return {};
}

export const MsgBuyPlanResponse = {
  encode(_: MsgBuyPlanResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgBuyPlanResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBuyPlanResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgBuyPlanResponse {
    return {};
  },

  toJSON(_: MsgBuyPlanResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgBuyPlanResponse>, I>>(base?: I): MsgBuyPlanResponse {
    return MsgBuyPlanResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgBuyPlanResponse>, I>>(_: I): MsgBuyPlanResponse {
    const message = createBaseMsgBuyPlanResponse();
    return message;
  },
};

function createBaseMsgCancelPlan(): MsgCancelPlan {
  return { planId: 0, sender: "" };
}

export const MsgCancelPlan = {
  encode(message: MsgCancelPlan, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.planId !== 0) {
      writer.uint32(8).uint64(message.planId);
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCancelPlan {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCancelPlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.planId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCancelPlan {
    return {
      planId: isSet(object.planId) ? globalThis.Number(object.planId) : 0,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgCancelPlan): unknown {
    const obj: any = {};
    if (message.planId !== 0) {
      obj.planId = Math.round(message.planId);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCancelPlan>, I>>(base?: I): MsgCancelPlan {
    return MsgCancelPlan.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCancelPlan>, I>>(object: I): MsgCancelPlan {
    const message = createBaseMsgCancelPlan();
    message.planId = object.planId ?? 0;
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgCancelPlanResponse(): MsgCancelPlanResponse {
  return {};
}

export const MsgCancelPlanResponse = {
  encode(_: MsgCancelPlanResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCancelPlanResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCancelPlanResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCancelPlanResponse {
    return {};
  },

  toJSON(_: MsgCancelPlanResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCancelPlanResponse>, I>>(base?: I): MsgCancelPlanResponse {
    return MsgCancelPlanResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCancelPlanResponse>, I>>(_: I): MsgCancelPlanResponse {
    const message = createBaseMsgCancelPlanResponse();
    return message;
  },
};

function createBaseMsgCreateNonce(): MsgCreateNonce {
  return { planId: 0, sender: "", expiration: undefined, user: "" };
}

export const MsgCreateNonce = {
  encode(message: MsgCreateNonce, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.planId !== 0) {
      writer.uint32(8).uint64(message.planId);
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    if (message.expiration !== undefined) {
      Timestamp.encode(toTimestamp(message.expiration), writer.uint32(26).fork()).ldelim();
    }
    if (message.user !== "") {
      writer.uint32(34).string(message.user);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateNonce {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateNonce();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.planId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.expiration = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.user = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateNonce {
    return {
      planId: isSet(object.planId) ? globalThis.Number(object.planId) : 0,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      expiration: isSet(object.expiration) ? fromJsonTimestamp(object.expiration) : undefined,
      user: isSet(object.user) ? globalThis.String(object.user) : "",
    };
  },

  toJSON(message: MsgCreateNonce): unknown {
    const obj: any = {};
    if (message.planId !== 0) {
      obj.planId = Math.round(message.planId);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.expiration !== undefined) {
      obj.expiration = message.expiration.toISOString();
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateNonce>, I>>(base?: I): MsgCreateNonce {
    return MsgCreateNonce.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateNonce>, I>>(object: I): MsgCreateNonce {
    const message = createBaseMsgCreateNonce();
    message.planId = object.planId ?? 0;
    message.sender = object.sender ?? "";
    message.expiration = object.expiration ?? undefined;
    message.user = object.user ?? "";
    return message;
  },
};

function createBaseMsgCreateNonceResponse(): MsgCreateNonceResponse {
  return {};
}

export const MsgCreateNonceResponse = {
  encode(_: MsgCreateNonceResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateNonceResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateNonceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateNonceResponse {
    return {};
  },

  toJSON(_: MsgCreateNonceResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateNonceResponse>, I>>(base?: I): MsgCreateNonceResponse {
    return MsgCreateNonceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateNonceResponse>, I>>(_: I): MsgCreateNonceResponse {
    const message = createBaseMsgCreateNonceResponse();
    return message;
  },
};

function createBaseMsgFundAccount(): MsgFundAccount {
  return { planId: 0, sender: "", amount: [] };
}

export const MsgFundAccount = {
  encode(message: MsgFundAccount, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.planId !== 0) {
      writer.uint32(8).uint64(message.planId);
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgFundAccount {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgFundAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.planId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgFundAccount {
    return {
      planId: isSet(object.planId) ? globalThis.Number(object.planId) : 0,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      amount: globalThis.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgFundAccount): unknown {
    const obj: any = {};
    if (message.planId !== 0) {
      obj.planId = Math.round(message.planId);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgFundAccount>, I>>(base?: I): MsgFundAccount {
    return MsgFundAccount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgFundAccount>, I>>(object: I): MsgFundAccount {
    const message = createBaseMsgFundAccount();
    message.planId = object.planId ?? 0;
    message.sender = object.sender ?? "";
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgFundAccountResponse(): MsgFundAccountResponse {
  return {};
}

export const MsgFundAccountResponse = {
  encode(_: MsgFundAccountResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgFundAccountResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgFundAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgFundAccountResponse {
    return {};
  },

  toJSON(_: MsgFundAccountResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgFundAccountResponse>, I>>(base?: I): MsgFundAccountResponse {
    return MsgFundAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgFundAccountResponse>, I>>(_: I): MsgFundAccountResponse {
    const message = createBaseMsgFundAccountResponse();
    return message;
  },
};

/** Msg defines the Subscription Msg service. */
export interface Msg {
  /** CreatePlan defines a method to list purchase plans */
  CreatePlan(request: MsgCreatePlan): Promise<MsgCreatePlanResponse>;
  /** BuyPlan defines a method to buy a plan */
  BuyPlan(request: MsgBuyPlan): Promise<MsgBuyPlanResponse>;
  /** CancelPlan defines a method to close a plan */
  CancelPlan(request: MsgCancelPlan): Promise<MsgCancelPlanResponse>;
  /** CreateNonce defines a method to create a nonce */
  CreateNonce(request: MsgCreateNonce): Promise<MsgCreateNonceResponse>;
  /** FundAccount defines a method to deposit amount into user account */
  FundAccount(request: MsgFundAccount): Promise<MsgFundAccountResponse>;
}

export const MsgServiceName = "arka.subscription.v1beta1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.CreatePlan = this.CreatePlan.bind(this);
    this.BuyPlan = this.BuyPlan.bind(this);
    this.CancelPlan = this.CancelPlan.bind(this);
    this.CreateNonce = this.CreateNonce.bind(this);
    this.FundAccount = this.FundAccount.bind(this);
  }
  CreatePlan(request: MsgCreatePlan): Promise<MsgCreatePlanResponse> {
    const data = MsgCreatePlan.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreatePlan", data);
    return promise.then((data) => MsgCreatePlanResponse.decode(_m0.Reader.create(data)));
  }

  BuyPlan(request: MsgBuyPlan): Promise<MsgBuyPlanResponse> {
    const data = MsgBuyPlan.encode(request).finish();
    const promise = this.rpc.request(this.service, "BuyPlan", data);
    return promise.then((data) => MsgBuyPlanResponse.decode(_m0.Reader.create(data)));
  }

  CancelPlan(request: MsgCancelPlan): Promise<MsgCancelPlanResponse> {
    const data = MsgCancelPlan.encode(request).finish();
    const promise = this.rpc.request(this.service, "CancelPlan", data);
    return promise.then((data) => MsgCancelPlanResponse.decode(_m0.Reader.create(data)));
  }

  CreateNonce(request: MsgCreateNonce): Promise<MsgCreateNonceResponse> {
    const data = MsgCreateNonce.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateNonce", data);
    return promise.then((data) => MsgCreateNonceResponse.decode(_m0.Reader.create(data)));
  }

  FundAccount(request: MsgFundAccount): Promise<MsgFundAccountResponse> {
    const data = MsgFundAccount.encode(request).finish();
    const promise = this.rpc.request(this.service, "FundAccount", data);
    return promise.then((data) => MsgFundAccountResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
