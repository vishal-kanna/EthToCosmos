// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: arka/agenthub/v1beta1/event.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "arka.agenthub.v1beta1";

/** EventCreateOrganization is emitted on Msg/CreateOrganization */
export interface EventCreateOrganization {
  /** name is the unique name of the organization */
  name: string;
  /** id is the unique id of the organization. */
  id: number;
  /** creator is the account address of the organization creator */
  creator: string;
}

/** EventCreateUsers is emitted on Msg/CreateUsers */
export interface EventCreateUsers {
  /** agent_id is the unique id of the agent */
  agentId: number;
  /** creator is the account address of the agent admin */
  creator: string;
  /** user is the account address of the user */
  user: string[];
}

/** EventCreateAgent is emitted on Msg/CreateAgent */
export interface EventCreateAgent {
  /** agent_id is the unique id of the agent */
  agentId: number;
  /** creator is the account address of the creator */
  creator: string;
}

function createBaseEventCreateOrganization(): EventCreateOrganization {
  return { name: "", id: 0, creator: "" };
}

export const EventCreateOrganization = {
  encode(message: EventCreateOrganization, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.id !== 0) {
      writer.uint32(16).uint64(message.id);
    }
    if (message.creator !== "") {
      writer.uint32(42).string(message.creator);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventCreateOrganization {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCreateOrganization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.creator = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventCreateOrganization {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: EventCreateOrganization): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventCreateOrganization>, I>>(base?: I): EventCreateOrganization {
    return EventCreateOrganization.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventCreateOrganization>, I>>(object: I): EventCreateOrganization {
    const message = createBaseEventCreateOrganization();
    message.name = object.name ?? "";
    message.id = object.id ?? 0;
    message.creator = object.creator ?? "";
    return message;
  },
};

function createBaseEventCreateUsers(): EventCreateUsers {
  return { agentId: 0, creator: "", user: [] };
}

export const EventCreateUsers = {
  encode(message: EventCreateUsers, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.agentId !== 0) {
      writer.uint32(8).uint64(message.agentId);
    }
    if (message.creator !== "") {
      writer.uint32(18).string(message.creator);
    }
    for (const v of message.user) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventCreateUsers {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCreateUsers();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.agentId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.user.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventCreateUsers {
    return {
      agentId: isSet(object.agentId) ? globalThis.Number(object.agentId) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      user: globalThis.Array.isArray(object?.user) ? object.user.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: EventCreateUsers): unknown {
    const obj: any = {};
    if (message.agentId !== 0) {
      obj.agentId = Math.round(message.agentId);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.user?.length) {
      obj.user = message.user;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventCreateUsers>, I>>(base?: I): EventCreateUsers {
    return EventCreateUsers.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventCreateUsers>, I>>(object: I): EventCreateUsers {
    const message = createBaseEventCreateUsers();
    message.agentId = object.agentId ?? 0;
    message.creator = object.creator ?? "";
    message.user = object.user?.map((e) => e) || [];
    return message;
  },
};

function createBaseEventCreateAgent(): EventCreateAgent {
  return { agentId: 0, creator: "" };
}

export const EventCreateAgent = {
  encode(message: EventCreateAgent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.agentId !== 0) {
      writer.uint32(8).uint64(message.agentId);
    }
    if (message.creator !== "") {
      writer.uint32(18).string(message.creator);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventCreateAgent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCreateAgent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.agentId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.creator = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventCreateAgent {
    return {
      agentId: isSet(object.agentId) ? globalThis.Number(object.agentId) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: EventCreateAgent): unknown {
    const obj: any = {};
    if (message.agentId !== 0) {
      obj.agentId = Math.round(message.agentId);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventCreateAgent>, I>>(base?: I): EventCreateAgent {
    return EventCreateAgent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventCreateAgent>, I>>(object: I): EventCreateAgent {
    const message = createBaseEventCreateAgent();
    message.agentId = object.agentId ?? 0;
    message.creator = object.creator ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
