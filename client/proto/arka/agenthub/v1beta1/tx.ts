// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: arka/agenthub/v1beta1/tx.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import {
  AgentMetadata,
  AgentMode,
  agentModeFromJSON,
  agentModeToJSON,
  AgentOutput,
  agentOutputFromJSON,
  agentOutputToJSON,
} from "./agenthub";

export const protobufPackage = "arka.agenthub.v1beta1";

/** MsgUpdateProfile defines the Msg/UpdateProfile request type */
export interface MsgUpdateProfile {
  /** name is the name of the user */
  name: string;
  /** description is the short description of user */
  description: string;
  /** sender is the account address of the user who wants to update profile details */
  sender: string;
  /** profile_image is the IPFS url */
  profileImage: string;
}

/** MsgUpdateProfile defines the Msg/UpdateProfile response type */
export interface MsgUpdateProfileResponse {
}

/** MsgCreateOrganization Defines the Msg/CreateOrganization request type. */
export interface MsgCreateOrganization {
  /** name is the unique name of the organization */
  name: string;
  /** dtailed description of the organization, preferably a link to a hackmd file (e.g., on IPFS). */
  description: string;
  /** profile_image is the URL of the organization's profile image. */
  profileImage: string;
  /** metadata is arbitary metadata attached to the organization */
  metadata: Uint8Array;
  /** sender is the account address of the organization creator */
  sender: string;
}

/** MsgCreateOrganizationResponse Defines the Msg/CreateOrganization response type. */
export interface MsgCreateOrganizationResponse {
}

/** MsgLinkUsers Defines the Msg/LinkUsers request type. */
export interface MsgLinkUsers {
  /** agent_id is the unique id of the agent */
  agentId: number;
  /** address is the list of unique account address */
  address: string[];
  /** sender is the account address of the agent creator */
  sender: string;
}

/** MsgLinkUsersResponse Defines the Msg/LinkUsers response type */
export interface MsgLinkUsersResponse {
}

/** MsgCreateAgent defines the Msg/CreateAgent request type */
export interface MsgCreateAgent {
  /** name is the unique name of the AI agent */
  name: string;
  /** agent_mode is the agent type. Either private or public */
  agentMode: AgentMode;
  /** description is the detailed summary of the AI agent. */
  description: string;
  /** software is the list of supported softwares */
  software: string[];
  /** license is the AI agent license */
  license: string;
  /** repository_url is the AI agent repositoryURL */
  repositoryUrl: string;
  /** metadata is arbitary metadata attached to the agent */
  metadata:
    | AgentMetadata
    | undefined;
  /** checksum is the sha256 checksum of the agent */
  checksum: string;
  /** sender is the account address of the creator */
  sender: string;
  /** tags represents list of tags attached to the AI agent */
  tags: string[];
  /** images are the list of images URLs for AI agent */
  images: string[];
  /** nft_convertible represents whether this agent can be allowed to convert into an NFT. */
  nftConvertible: boolean;
  /** agent_output defines agent output format type */
  agentOutput: AgentOutput;
}

/** MsgCreateAgentResponse defines the Msg/CreateAgent response type */
export interface MsgCreateAgentResponse {
}

/** MsgAgentToNFT defines the Msg/ConvertAgentToNFT request type. */
export interface MsgAgentToNFT {
  sender: string;
  agentId: number;
}

/** MsgAgentToNFTResponse defines the Msg/ConvertAgentToNFT response type. */
export interface MsgAgentToNFTResponse {
}

/** MsgLinkAgent defines the Msg/LinkAgent request type. */
export interface MsgLinkAgent {
  orgId: number;
  agentIds: number[];
}

/** MsgLinkAgentResponse defines the Msg/LinkAgent response type. */
export interface MsgLinkAgentResponse {
}

function createBaseMsgUpdateProfile(): MsgUpdateProfile {
  return { name: "", description: "", sender: "", profileImage: "" };
}

export const MsgUpdateProfile = {
  encode(message: MsgUpdateProfile, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    if (message.profileImage !== "") {
      writer.uint32(34).string(message.profileImage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateProfile {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.profileImage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateProfile {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      profileImage: isSet(object.profileImage) ? globalThis.String(object.profileImage) : "",
    };
  },

  toJSON(message: MsgUpdateProfile): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.profileImage !== "") {
      obj.profileImage = message.profileImage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateProfile>, I>>(base?: I): MsgUpdateProfile {
    return MsgUpdateProfile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateProfile>, I>>(object: I): MsgUpdateProfile {
    const message = createBaseMsgUpdateProfile();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.sender = object.sender ?? "";
    message.profileImage = object.profileImage ?? "";
    return message;
  },
};

function createBaseMsgUpdateProfileResponse(): MsgUpdateProfileResponse {
  return {};
}

export const MsgUpdateProfileResponse = {
  encode(_: MsgUpdateProfileResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateProfileResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateProfileResponse {
    return {};
  },

  toJSON(_: MsgUpdateProfileResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateProfileResponse>, I>>(base?: I): MsgUpdateProfileResponse {
    return MsgUpdateProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateProfileResponse>, I>>(_: I): MsgUpdateProfileResponse {
    const message = createBaseMsgUpdateProfileResponse();
    return message;
  },
};

function createBaseMsgCreateOrganization(): MsgCreateOrganization {
  return { name: "", description: "", profileImage: "", metadata: new Uint8Array(0), sender: "" };
}

export const MsgCreateOrganization = {
  encode(message: MsgCreateOrganization, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.profileImage !== "") {
      writer.uint32(26).string(message.profileImage);
    }
    if (message.metadata.length !== 0) {
      writer.uint32(34).bytes(message.metadata);
    }
    if (message.sender !== "") {
      writer.uint32(42).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateOrganization {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateOrganization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.profileImage = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.metadata = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateOrganization {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      profileImage: isSet(object.profileImage) ? globalThis.String(object.profileImage) : "",
      metadata: isSet(object.metadata) ? bytesFromBase64(object.metadata) : new Uint8Array(0),
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgCreateOrganization): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.profileImage !== "") {
      obj.profileImage = message.profileImage;
    }
    if (message.metadata.length !== 0) {
      obj.metadata = base64FromBytes(message.metadata);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateOrganization>, I>>(base?: I): MsgCreateOrganization {
    return MsgCreateOrganization.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateOrganization>, I>>(object: I): MsgCreateOrganization {
    const message = createBaseMsgCreateOrganization();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.profileImage = object.profileImage ?? "";
    message.metadata = object.metadata ?? new Uint8Array(0);
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgCreateOrganizationResponse(): MsgCreateOrganizationResponse {
  return {};
}

export const MsgCreateOrganizationResponse = {
  encode(_: MsgCreateOrganizationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateOrganizationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateOrganizationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateOrganizationResponse {
    return {};
  },

  toJSON(_: MsgCreateOrganizationResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateOrganizationResponse>, I>>(base?: I): MsgCreateOrganizationResponse {
    return MsgCreateOrganizationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateOrganizationResponse>, I>>(_: I): MsgCreateOrganizationResponse {
    const message = createBaseMsgCreateOrganizationResponse();
    return message;
  },
};

function createBaseMsgLinkUsers(): MsgLinkUsers {
  return { agentId: 0, address: [], sender: "" };
}

export const MsgLinkUsers = {
  encode(message: MsgLinkUsers, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.agentId !== 0) {
      writer.uint32(8).uint64(message.agentId);
    }
    for (const v of message.address) {
      writer.uint32(18).string(v!);
    }
    if (message.sender !== "") {
      writer.uint32(42).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgLinkUsers {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLinkUsers();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.agentId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgLinkUsers {
    return {
      agentId: isSet(object.agentId) ? globalThis.Number(object.agentId) : 0,
      address: globalThis.Array.isArray(object?.address) ? object.address.map((e: any) => globalThis.String(e)) : [],
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgLinkUsers): unknown {
    const obj: any = {};
    if (message.agentId !== 0) {
      obj.agentId = Math.round(message.agentId);
    }
    if (message.address?.length) {
      obj.address = message.address;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgLinkUsers>, I>>(base?: I): MsgLinkUsers {
    return MsgLinkUsers.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgLinkUsers>, I>>(object: I): MsgLinkUsers {
    const message = createBaseMsgLinkUsers();
    message.agentId = object.agentId ?? 0;
    message.address = object.address?.map((e) => e) || [];
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgLinkUsersResponse(): MsgLinkUsersResponse {
  return {};
}

export const MsgLinkUsersResponse = {
  encode(_: MsgLinkUsersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgLinkUsersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLinkUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgLinkUsersResponse {
    return {};
  },

  toJSON(_: MsgLinkUsersResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgLinkUsersResponse>, I>>(base?: I): MsgLinkUsersResponse {
    return MsgLinkUsersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgLinkUsersResponse>, I>>(_: I): MsgLinkUsersResponse {
    const message = createBaseMsgLinkUsersResponse();
    return message;
  },
};

function createBaseMsgCreateAgent(): MsgCreateAgent {
  return {
    name: "",
    agentMode: 0,
    description: "",
    software: [],
    license: "",
    repositoryUrl: "",
    metadata: undefined,
    checksum: "",
    sender: "",
    tags: [],
    images: [],
    nftConvertible: false,
    agentOutput: 0,
  };
}

export const MsgCreateAgent = {
  encode(message: MsgCreateAgent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.agentMode !== 0) {
      writer.uint32(16).int32(message.agentMode);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.software) {
      writer.uint32(34).string(v!);
    }
    if (message.license !== "") {
      writer.uint32(42).string(message.license);
    }
    if (message.repositoryUrl !== "") {
      writer.uint32(50).string(message.repositoryUrl);
    }
    if (message.metadata !== undefined) {
      AgentMetadata.encode(message.metadata, writer.uint32(58).fork()).ldelim();
    }
    if (message.checksum !== "") {
      writer.uint32(66).string(message.checksum);
    }
    if (message.sender !== "") {
      writer.uint32(74).string(message.sender);
    }
    for (const v of message.tags) {
      writer.uint32(82).string(v!);
    }
    for (const v of message.images) {
      writer.uint32(90).string(v!);
    }
    if (message.nftConvertible !== false) {
      writer.uint32(96).bool(message.nftConvertible);
    }
    if (message.agentOutput !== 0) {
      writer.uint32(104).int32(message.agentOutput);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateAgent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateAgent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.agentMode = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.software.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.license = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.repositoryUrl = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.metadata = AgentMetadata.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.checksum = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.images.push(reader.string());
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.nftConvertible = reader.bool();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.agentOutput = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateAgent {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      agentMode: isSet(object.agentMode) ? agentModeFromJSON(object.agentMode) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      software: globalThis.Array.isArray(object?.software) ? object.software.map((e: any) => globalThis.String(e)) : [],
      license: isSet(object.license) ? globalThis.String(object.license) : "",
      repositoryUrl: isSet(object.repositoryUrl) ? globalThis.String(object.repositoryUrl) : "",
      metadata: isSet(object.metadata) ? AgentMetadata.fromJSON(object.metadata) : undefined,
      checksum: isSet(object.checksum) ? globalThis.String(object.checksum) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      images: globalThis.Array.isArray(object?.images) ? object.images.map((e: any) => globalThis.String(e)) : [],
      nftConvertible: isSet(object.nftConvertible) ? globalThis.Boolean(object.nftConvertible) : false,
      agentOutput: isSet(object.agentOutput) ? agentOutputFromJSON(object.agentOutput) : 0,
    };
  },

  toJSON(message: MsgCreateAgent): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.agentMode !== 0) {
      obj.agentMode = agentModeToJSON(message.agentMode);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.software?.length) {
      obj.software = message.software;
    }
    if (message.license !== "") {
      obj.license = message.license;
    }
    if (message.repositoryUrl !== "") {
      obj.repositoryUrl = message.repositoryUrl;
    }
    if (message.metadata !== undefined) {
      obj.metadata = AgentMetadata.toJSON(message.metadata);
    }
    if (message.checksum !== "") {
      obj.checksum = message.checksum;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.images?.length) {
      obj.images = message.images;
    }
    if (message.nftConvertible !== false) {
      obj.nftConvertible = message.nftConvertible;
    }
    if (message.agentOutput !== 0) {
      obj.agentOutput = agentOutputToJSON(message.agentOutput);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateAgent>, I>>(base?: I): MsgCreateAgent {
    return MsgCreateAgent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateAgent>, I>>(object: I): MsgCreateAgent {
    const message = createBaseMsgCreateAgent();
    message.name = object.name ?? "";
    message.agentMode = object.agentMode ?? 0;
    message.description = object.description ?? "";
    message.software = object.software?.map((e) => e) || [];
    message.license = object.license ?? "";
    message.repositoryUrl = object.repositoryUrl ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? AgentMetadata.fromPartial(object.metadata)
      : undefined;
    message.checksum = object.checksum ?? "";
    message.sender = object.sender ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.images = object.images?.map((e) => e) || [];
    message.nftConvertible = object.nftConvertible ?? false;
    message.agentOutput = object.agentOutput ?? 0;
    return message;
  },
};

function createBaseMsgCreateAgentResponse(): MsgCreateAgentResponse {
  return {};
}

export const MsgCreateAgentResponse = {
  encode(_: MsgCreateAgentResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateAgentResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateAgentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateAgentResponse {
    return {};
  },

  toJSON(_: MsgCreateAgentResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateAgentResponse>, I>>(base?: I): MsgCreateAgentResponse {
    return MsgCreateAgentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateAgentResponse>, I>>(_: I): MsgCreateAgentResponse {
    const message = createBaseMsgCreateAgentResponse();
    return message;
  },
};

function createBaseMsgAgentToNFT(): MsgAgentToNFT {
  return { sender: "", agentId: 0 };
}

export const MsgAgentToNFT = {
  encode(message: MsgAgentToNFT, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.agentId !== 0) {
      writer.uint32(16).uint64(message.agentId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAgentToNFT {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAgentToNFT();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.agentId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAgentToNFT {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      agentId: isSet(object.agentId) ? globalThis.Number(object.agentId) : 0,
    };
  },

  toJSON(message: MsgAgentToNFT): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.agentId !== 0) {
      obj.agentId = Math.round(message.agentId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAgentToNFT>, I>>(base?: I): MsgAgentToNFT {
    return MsgAgentToNFT.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAgentToNFT>, I>>(object: I): MsgAgentToNFT {
    const message = createBaseMsgAgentToNFT();
    message.sender = object.sender ?? "";
    message.agentId = object.agentId ?? 0;
    return message;
  },
};

function createBaseMsgAgentToNFTResponse(): MsgAgentToNFTResponse {
  return {};
}

export const MsgAgentToNFTResponse = {
  encode(_: MsgAgentToNFTResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAgentToNFTResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAgentToNFTResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAgentToNFTResponse {
    return {};
  },

  toJSON(_: MsgAgentToNFTResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAgentToNFTResponse>, I>>(base?: I): MsgAgentToNFTResponse {
    return MsgAgentToNFTResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAgentToNFTResponse>, I>>(_: I): MsgAgentToNFTResponse {
    const message = createBaseMsgAgentToNFTResponse();
    return message;
  },
};

function createBaseMsgLinkAgent(): MsgLinkAgent {
  return { orgId: 0, agentIds: [] };
}

export const MsgLinkAgent = {
  encode(message: MsgLinkAgent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.orgId !== 0) {
      writer.uint32(8).uint64(message.orgId);
    }
    writer.uint32(18).fork();
    for (const v of message.agentIds) {
      writer.uint64(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgLinkAgent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLinkAgent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.orgId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag === 16) {
            message.agentIds.push(longToNumber(reader.uint64() as Long));

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.agentIds.push(longToNumber(reader.uint64() as Long));
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgLinkAgent {
    return {
      orgId: isSet(object.orgId) ? globalThis.Number(object.orgId) : 0,
      agentIds: globalThis.Array.isArray(object?.agentIds) ? object.agentIds.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: MsgLinkAgent): unknown {
    const obj: any = {};
    if (message.orgId !== 0) {
      obj.orgId = Math.round(message.orgId);
    }
    if (message.agentIds?.length) {
      obj.agentIds = message.agentIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgLinkAgent>, I>>(base?: I): MsgLinkAgent {
    return MsgLinkAgent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgLinkAgent>, I>>(object: I): MsgLinkAgent {
    const message = createBaseMsgLinkAgent();
    message.orgId = object.orgId ?? 0;
    message.agentIds = object.agentIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseMsgLinkAgentResponse(): MsgLinkAgentResponse {
  return {};
}

export const MsgLinkAgentResponse = {
  encode(_: MsgLinkAgentResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgLinkAgentResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLinkAgentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgLinkAgentResponse {
    return {};
  },

  toJSON(_: MsgLinkAgentResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgLinkAgentResponse>, I>>(base?: I): MsgLinkAgentResponse {
    return MsgLinkAgentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgLinkAgentResponse>, I>>(_: I): MsgLinkAgentResponse {
    const message = createBaseMsgLinkAgentResponse();
    return message;
  },
};

/** Msg service for the Agent hub Msg service. */
export interface Msg {
  /** CreateOrganization defines a method to create a new organization */
  CreateOrganization(request: MsgCreateOrganization): Promise<MsgCreateOrganizationResponse>;
  /** LinkUsers adds users to the given AI agent */
  LinkUsers(request: MsgLinkUsers): Promise<MsgLinkUsersResponse>;
  /** CreateAgent adds new AI to the given organization */
  CreateAgent(request: MsgCreateAgent): Promise<MsgCreateAgentResponse>;
  /** UpdateProfile updates user's profile */
  UpdateProfile(request: MsgUpdateProfile): Promise<MsgUpdateProfileResponse>;
  /** LinkAgent adds agents to the given organization */
  LinkAgent(request: MsgLinkAgent): Promise<MsgLinkAgentResponse>;
  /** AgentToNft converts agent to nft */
  AgentToNFT(request: MsgAgentToNFT): Promise<MsgAgentToNFTResponse>;
}

export const MsgServiceName = "arka.agenthub.v1beta1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.CreateOrganization = this.CreateOrganization.bind(this);
    this.LinkUsers = this.LinkUsers.bind(this);
    this.CreateAgent = this.CreateAgent.bind(this);
    this.UpdateProfile = this.UpdateProfile.bind(this);
    this.LinkAgent = this.LinkAgent.bind(this);
    this.AgentToNFT = this.AgentToNFT.bind(this);
  }
  CreateOrganization(request: MsgCreateOrganization): Promise<MsgCreateOrganizationResponse> {
    const data = MsgCreateOrganization.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateOrganization", data);
    return promise.then((data) => MsgCreateOrganizationResponse.decode(_m0.Reader.create(data)));
  }

  LinkUsers(request: MsgLinkUsers): Promise<MsgLinkUsersResponse> {
    const data = MsgLinkUsers.encode(request).finish();
    const promise = this.rpc.request(this.service, "LinkUsers", data);
    return promise.then((data) => MsgLinkUsersResponse.decode(_m0.Reader.create(data)));
  }

  CreateAgent(request: MsgCreateAgent): Promise<MsgCreateAgentResponse> {
    const data = MsgCreateAgent.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateAgent", data);
    return promise.then((data) => MsgCreateAgentResponse.decode(_m0.Reader.create(data)));
  }

  UpdateProfile(request: MsgUpdateProfile): Promise<MsgUpdateProfileResponse> {
    const data = MsgUpdateProfile.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateProfile", data);
    return promise.then((data) => MsgUpdateProfileResponse.decode(_m0.Reader.create(data)));
  }

  LinkAgent(request: MsgLinkAgent): Promise<MsgLinkAgentResponse> {
    const data = MsgLinkAgent.encode(request).finish();
    const promise = this.rpc.request(this.service, "LinkAgent", data);
    return promise.then((data) => MsgLinkAgentResponse.decode(_m0.Reader.create(data)));
  }

  AgentToNFT(request: MsgAgentToNFT): Promise<MsgAgentToNFTResponse> {
    const data = MsgAgentToNFT.encode(request).finish();
    const promise = this.rpc.request(this.service, "AgentToNFT", data);
    return promise.then((data) => MsgAgentToNFTResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
