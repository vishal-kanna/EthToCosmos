// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: arka/agenthub/v1beta1/query.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Agent, AgentMode, agentModeFromJSON, agentModeToJSON, Organization, User } from "./agenthub";

export const protobufPackage = "arka.agenthub.v1beta1";

/** QueryAgentsRequest is the request type for the Query/Agents RPC method. */
export interface QueryAgentsRequest {
  agentMode: AgentMode;
  creator: string;
  /** pagination defines an pagination for the request. */
  pagination: PageRequest | undefined;
}

/** QueryAgentsResponse is the response type for the Query/Agents RPC method. */
export interface QueryAgentsResponse {
  /** agents defines list of AI agent */
  agents: Agent[];
  /** pagination defines an pagination for the response. */
  pagination: PageResponse | undefined;
}

/** QueryAgentByIDRequest is the request type for the Query/AgentByID RPC method. */
export interface QueryAgentByIDRequest {
  /** agent_id defines unique id of agent. */
  agentId: number;
}

/** QueryAgentByIDResponse is the response type for the Query/AgentByID RPC method. */
export interface QueryAgentByIDResponse {
  /** agents defines list of AI agent */
  agent: Agent | undefined;
}

/** QueryOrganizationsRequest is the request type for the Query/Organizations RPC method. */
export interface QueryOrganizationsRequest {
  /** pagination defines an pagination for the request. */
  pagination: PageRequest | undefined;
}

/** QueryOrganizationsResponse is the response type for the Query/Organizations RPC method. */
export interface QueryOrganizationsResponse {
  /** organizations defines list of organizations */
  organizations: Organization[];
  /** pagination defines an pagination for the response. */
  pagination: PageResponse | undefined;
}

/** QueryOrganizationRequest is the request type for the Query/Organization RPC method. */
export interface QueryOrganizationRequest {
  /** organization_id defines unique id of organization. */
  organizationId: number;
}

/** QueryOrganizationResponse is the response type for the Query/Organization RPC method. */
export interface QueryOrganizationResponse {
  /** organizations defines list of organizations */
  organization: Organization | undefined;
}

/** QueryUsersRequest is the request type for the Query/Users RPC method. */
export interface QueryUsersRequest {
  /** pagination defines an pagination for the request. */
  pagination: PageRequest | undefined;
}

/** QueryUsersResponse is the response type for the Query/Users RPC method. */
export interface QueryUsersResponse {
  /** users defines list of organization users */
  users: User[];
  /** pagination defines an pagination for the request. */
  pagination: PageResponse | undefined;
}

/** QueryUserRequest is the request type for the Query/GetUser RPC method. */
export interface QueryGetUserRequest {
  /** user_addr defines unique address of user. */
  userAddr: string;
}

/** QueryUserRequest is the response type for the Query/GetUser RPC method. */
export interface QueryGetUserResponse {
  /** user defines the user of AI agent */
  user: User | undefined;
}

function createBaseQueryAgentsRequest(): QueryAgentsRequest {
  return { agentMode: 0, creator: "", pagination: undefined };
}

export const QueryAgentsRequest = {
  encode(message: QueryAgentsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.agentMode !== 0) {
      writer.uint32(8).int32(message.agentMode);
    }
    if (message.creator !== "") {
      writer.uint32(18).string(message.creator);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAgentsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAgentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.agentMode = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAgentsRequest {
    return {
      agentMode: isSet(object.agentMode) ? agentModeFromJSON(object.agentMode) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAgentsRequest): unknown {
    const obj: any = {};
    if (message.agentMode !== 0) {
      obj.agentMode = agentModeToJSON(message.agentMode);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAgentsRequest>, I>>(base?: I): QueryAgentsRequest {
    return QueryAgentsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAgentsRequest>, I>>(object: I): QueryAgentsRequest {
    const message = createBaseQueryAgentsRequest();
    message.agentMode = object.agentMode ?? 0;
    message.creator = object.creator ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAgentsResponse(): QueryAgentsResponse {
  return { agents: [], pagination: undefined };
}

export const QueryAgentsResponse = {
  encode(message: QueryAgentsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.agents) {
      Agent.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAgentsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAgentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.agents.push(Agent.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAgentsResponse {
    return {
      agents: globalThis.Array.isArray(object?.agents) ? object.agents.map((e: any) => Agent.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAgentsResponse): unknown {
    const obj: any = {};
    if (message.agents?.length) {
      obj.agents = message.agents.map((e) => Agent.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAgentsResponse>, I>>(base?: I): QueryAgentsResponse {
    return QueryAgentsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAgentsResponse>, I>>(object: I): QueryAgentsResponse {
    const message = createBaseQueryAgentsResponse();
    message.agents = object.agents?.map((e) => Agent.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAgentByIDRequest(): QueryAgentByIDRequest {
  return { agentId: 0 };
}

export const QueryAgentByIDRequest = {
  encode(message: QueryAgentByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.agentId !== 0) {
      writer.uint32(8).uint64(message.agentId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAgentByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAgentByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.agentId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAgentByIDRequest {
    return { agentId: isSet(object.agentId) ? globalThis.Number(object.agentId) : 0 };
  },

  toJSON(message: QueryAgentByIDRequest): unknown {
    const obj: any = {};
    if (message.agentId !== 0) {
      obj.agentId = Math.round(message.agentId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAgentByIDRequest>, I>>(base?: I): QueryAgentByIDRequest {
    return QueryAgentByIDRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAgentByIDRequest>, I>>(object: I): QueryAgentByIDRequest {
    const message = createBaseQueryAgentByIDRequest();
    message.agentId = object.agentId ?? 0;
    return message;
  },
};

function createBaseQueryAgentByIDResponse(): QueryAgentByIDResponse {
  return { agent: undefined };
}

export const QueryAgentByIDResponse = {
  encode(message: QueryAgentByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.agent !== undefined) {
      Agent.encode(message.agent, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAgentByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAgentByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.agent = Agent.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAgentByIDResponse {
    return { agent: isSet(object.agent) ? Agent.fromJSON(object.agent) : undefined };
  },

  toJSON(message: QueryAgentByIDResponse): unknown {
    const obj: any = {};
    if (message.agent !== undefined) {
      obj.agent = Agent.toJSON(message.agent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAgentByIDResponse>, I>>(base?: I): QueryAgentByIDResponse {
    return QueryAgentByIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAgentByIDResponse>, I>>(object: I): QueryAgentByIDResponse {
    const message = createBaseQueryAgentByIDResponse();
    message.agent = (object.agent !== undefined && object.agent !== null) ? Agent.fromPartial(object.agent) : undefined;
    return message;
  },
};

function createBaseQueryOrganizationsRequest(): QueryOrganizationsRequest {
  return { pagination: undefined };
}

export const QueryOrganizationsRequest = {
  encode(message: QueryOrganizationsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryOrganizationsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOrganizationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOrganizationsRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryOrganizationsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryOrganizationsRequest>, I>>(base?: I): QueryOrganizationsRequest {
    return QueryOrganizationsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryOrganizationsRequest>, I>>(object: I): QueryOrganizationsRequest {
    const message = createBaseQueryOrganizationsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryOrganizationsResponse(): QueryOrganizationsResponse {
  return { organizations: [], pagination: undefined };
}

export const QueryOrganizationsResponse = {
  encode(message: QueryOrganizationsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.organizations) {
      Organization.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryOrganizationsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOrganizationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.organizations.push(Organization.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOrganizationsResponse {
    return {
      organizations: globalThis.Array.isArray(object?.organizations)
        ? object.organizations.map((e: any) => Organization.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryOrganizationsResponse): unknown {
    const obj: any = {};
    if (message.organizations?.length) {
      obj.organizations = message.organizations.map((e) => Organization.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryOrganizationsResponse>, I>>(base?: I): QueryOrganizationsResponse {
    return QueryOrganizationsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryOrganizationsResponse>, I>>(object: I): QueryOrganizationsResponse {
    const message = createBaseQueryOrganizationsResponse();
    message.organizations = object.organizations?.map((e) => Organization.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryOrganizationRequest(): QueryOrganizationRequest {
  return { organizationId: 0 };
}

export const QueryOrganizationRequest = {
  encode(message: QueryOrganizationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.organizationId !== 0) {
      writer.uint32(8).uint64(message.organizationId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryOrganizationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOrganizationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.organizationId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOrganizationRequest {
    return { organizationId: isSet(object.organizationId) ? globalThis.Number(object.organizationId) : 0 };
  },

  toJSON(message: QueryOrganizationRequest): unknown {
    const obj: any = {};
    if (message.organizationId !== 0) {
      obj.organizationId = Math.round(message.organizationId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryOrganizationRequest>, I>>(base?: I): QueryOrganizationRequest {
    return QueryOrganizationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryOrganizationRequest>, I>>(object: I): QueryOrganizationRequest {
    const message = createBaseQueryOrganizationRequest();
    message.organizationId = object.organizationId ?? 0;
    return message;
  },
};

function createBaseQueryOrganizationResponse(): QueryOrganizationResponse {
  return { organization: undefined };
}

export const QueryOrganizationResponse = {
  encode(message: QueryOrganizationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.organization !== undefined) {
      Organization.encode(message.organization, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryOrganizationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOrganizationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.organization = Organization.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOrganizationResponse {
    return { organization: isSet(object.organization) ? Organization.fromJSON(object.organization) : undefined };
  },

  toJSON(message: QueryOrganizationResponse): unknown {
    const obj: any = {};
    if (message.organization !== undefined) {
      obj.organization = Organization.toJSON(message.organization);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryOrganizationResponse>, I>>(base?: I): QueryOrganizationResponse {
    return QueryOrganizationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryOrganizationResponse>, I>>(object: I): QueryOrganizationResponse {
    const message = createBaseQueryOrganizationResponse();
    message.organization = (object.organization !== undefined && object.organization !== null)
      ? Organization.fromPartial(object.organization)
      : undefined;
    return message;
  },
};

function createBaseQueryUsersRequest(): QueryUsersRequest {
  return { pagination: undefined };
}

export const QueryUsersRequest = {
  encode(message: QueryUsersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryUsersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUsersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUsersRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryUsersRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryUsersRequest>, I>>(base?: I): QueryUsersRequest {
    return QueryUsersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryUsersRequest>, I>>(object: I): QueryUsersRequest {
    const message = createBaseQueryUsersRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryUsersResponse(): QueryUsersResponse {
  return { users: [], pagination: undefined };
}

export const QueryUsersResponse = {
  encode(message: QueryUsersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.users) {
      User.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryUsersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.users.push(User.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUsersResponse {
    return {
      users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => User.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryUsersResponse): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => User.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryUsersResponse>, I>>(base?: I): QueryUsersResponse {
    return QueryUsersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryUsersResponse>, I>>(object: I): QueryUsersResponse {
    const message = createBaseQueryUsersResponse();
    message.users = object.users?.map((e) => User.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetUserRequest(): QueryGetUserRequest {
  return { userAddr: "" };
}

export const QueryGetUserRequest = {
  encode(message: QueryGetUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userAddr !== "") {
      writer.uint32(10).string(message.userAddr);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userAddr = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetUserRequest {
    return { userAddr: isSet(object.userAddr) ? globalThis.String(object.userAddr) : "" };
  },

  toJSON(message: QueryGetUserRequest): unknown {
    const obj: any = {};
    if (message.userAddr !== "") {
      obj.userAddr = message.userAddr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetUserRequest>, I>>(base?: I): QueryGetUserRequest {
    return QueryGetUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetUserRequest>, I>>(object: I): QueryGetUserRequest {
    const message = createBaseQueryGetUserRequest();
    message.userAddr = object.userAddr ?? "";
    return message;
  },
};

function createBaseQueryGetUserResponse(): QueryGetUserResponse {
  return { user: undefined };
}

export const QueryGetUserResponse = {
  encode(message: QueryGetUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetUserResponse {
    return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
  },

  toJSON(message: QueryGetUserResponse): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetUserResponse>, I>>(base?: I): QueryGetUserResponse {
    return QueryGetUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetUserResponse>, I>>(object: I): QueryGetUserResponse {
    const message = createBaseQueryGetUserResponse();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Returns list of organizations. */
  Organizations(request: QueryOrganizationsRequest): Promise<QueryOrganizationsResponse>;
  /** Returns detailed information of given organization. */
  Organization(request: QueryOrganizationRequest): Promise<QueryOrganizationResponse>;
  /** Returns list of users for given agent. */
  Users(request: QueryUsersRequest): Promise<QueryUsersResponse>;
  /** returns list of AI agents belongs to the given organization */
  Agents(request: QueryAgentsRequest): Promise<QueryAgentsResponse>;
  /** returns AI agent belongs to the given organization-id and agent-id */
  AgentByID(request: QueryAgentByIDRequest): Promise<QueryAgentByIDResponse>;
  /** Returns user for given address. */
  GetUser(request: QueryGetUserRequest): Promise<QueryGetUserResponse>;
}

export const QueryServiceName = "arka.agenthub.v1beta1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Organizations = this.Organizations.bind(this);
    this.Organization = this.Organization.bind(this);
    this.Users = this.Users.bind(this);
    this.Agents = this.Agents.bind(this);
    this.AgentByID = this.AgentByID.bind(this);
    this.GetUser = this.GetUser.bind(this);
  }
  Organizations(request: QueryOrganizationsRequest): Promise<QueryOrganizationsResponse> {
    const data = QueryOrganizationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Organizations", data);
    return promise.then((data) => QueryOrganizationsResponse.decode(_m0.Reader.create(data)));
  }

  Organization(request: QueryOrganizationRequest): Promise<QueryOrganizationResponse> {
    const data = QueryOrganizationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Organization", data);
    return promise.then((data) => QueryOrganizationResponse.decode(_m0.Reader.create(data)));
  }

  Users(request: QueryUsersRequest): Promise<QueryUsersResponse> {
    const data = QueryUsersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Users", data);
    return promise.then((data) => QueryUsersResponse.decode(_m0.Reader.create(data)));
  }

  Agents(request: QueryAgentsRequest): Promise<QueryAgentsResponse> {
    const data = QueryAgentsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Agents", data);
    return promise.then((data) => QueryAgentsResponse.decode(_m0.Reader.create(data)));
  }

  AgentByID(request: QueryAgentByIDRequest): Promise<QueryAgentByIDResponse> {
    const data = QueryAgentByIDRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AgentByID", data);
    return promise.then((data) => QueryAgentByIDResponse.decode(_m0.Reader.create(data)));
  }

  GetUser(request: QueryGetUserRequest): Promise<QueryGetUserResponse> {
    const data = QueryGetUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetUser", data);
    return promise.then((data) => QueryGetUserResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
