// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: arka/agenthub/v1beta1/genesis.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Agent, Organization } from "./agenthub";

export const protobufPackage = "arka.agenthub.v1beta1";

/** Genesis defines agenthub genesis state */
export interface Genesis {
  organizationSeq: number;
  organizations: Organization[];
  users: UserState[];
  agentSeq: number;
  agents: Agent[];
}

/** UserState holds details of organization user */
export interface UserState {
  address: string;
  name: string;
  profileImage: string;
  description: string;
}

function createBaseGenesis(): Genesis {
  return { organizationSeq: 0, organizations: [], users: [], agentSeq: 0, agents: [] };
}

export const Genesis = {
  encode(message: Genesis, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.organizationSeq !== 0) {
      writer.uint32(8).uint64(message.organizationSeq);
    }
    for (const v of message.organizations) {
      Organization.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.users) {
      UserState.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.agentSeq !== 0) {
      writer.uint32(32).uint64(message.agentSeq);
    }
    for (const v of message.agents) {
      Agent.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Genesis {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesis();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.organizationSeq = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizations.push(Organization.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.users.push(UserState.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.agentSeq = longToNumber(reader.uint64() as Long);
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.agents.push(Agent.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Genesis {
    return {
      organizationSeq: isSet(object.organizationSeq) ? globalThis.Number(object.organizationSeq) : 0,
      organizations: globalThis.Array.isArray(object?.organizations)
        ? object.organizations.map((e: any) => Organization.fromJSON(e))
        : [],
      users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => UserState.fromJSON(e)) : [],
      agentSeq: isSet(object.agentSeq) ? globalThis.Number(object.agentSeq) : 0,
      agents: globalThis.Array.isArray(object?.agents) ? object.agents.map((e: any) => Agent.fromJSON(e)) : [],
    };
  },

  toJSON(message: Genesis): unknown {
    const obj: any = {};
    if (message.organizationSeq !== 0) {
      obj.organizationSeq = Math.round(message.organizationSeq);
    }
    if (message.organizations?.length) {
      obj.organizations = message.organizations.map((e) => Organization.toJSON(e));
    }
    if (message.users?.length) {
      obj.users = message.users.map((e) => UserState.toJSON(e));
    }
    if (message.agentSeq !== 0) {
      obj.agentSeq = Math.round(message.agentSeq);
    }
    if (message.agents?.length) {
      obj.agents = message.agents.map((e) => Agent.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Genesis>, I>>(base?: I): Genesis {
    return Genesis.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Genesis>, I>>(object: I): Genesis {
    const message = createBaseGenesis();
    message.organizationSeq = object.organizationSeq ?? 0;
    message.organizations = object.organizations?.map((e) => Organization.fromPartial(e)) || [];
    message.users = object.users?.map((e) => UserState.fromPartial(e)) || [];
    message.agentSeq = object.agentSeq ?? 0;
    message.agents = object.agents?.map((e) => Agent.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUserState(): UserState {
  return { address: "", name: "", profileImage: "", description: "" };
}

export const UserState = {
  encode(message: UserState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.profileImage !== "") {
      writer.uint32(26).string(message.profileImage);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.profileImage = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserState {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      profileImage: isSet(object.profileImage) ? globalThis.String(object.profileImage) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: UserState): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.profileImage !== "") {
      obj.profileImage = message.profileImage;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserState>, I>>(base?: I): UserState {
    return UserState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserState>, I>>(object: I): UserState {
    const message = createBaseUserState();
    message.address = object.address ?? "";
    message.name = object.name ?? "";
    message.profileImage = object.profileImage ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
